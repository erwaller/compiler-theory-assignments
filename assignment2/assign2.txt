
		ASSIGNMENT 2: C Expression Parsing

The purpose of this assignment is to familiarize you with writing
a parser in Bison or Yacc, including integration of your lexer,
and manipulating the semantic value stack via embedded actions.
When this assignment is completed, you will have written a rudimentary
interpreter for C-like expressions, using integer arithmetic only.

The Language (with a capital L) that you will be parsing is an
extremely simplified form of C, consisting of top-level declarations
and function definitions.  Both of these are further simplified,
as described below.

You should be able to re-use your lexer from assignment 1.  Work
individually on Assignment 2.  For Assignments 3 and higher, you may
choose to partner with no more than one other student, or you may
continue to work alone.

DECLARATIONS:
	A declaration, for our purposes, is the keyword int,
	followed by a comma-delimited list of one or more identifiers.
	All other types, including composite types such as arrays,
	need not be recognized at this time.

FUNCTIONS:
	A function definition will have no return type and no
	argument specification.  It will look like this:
		f()
		{
			/*declarations and statements */
				
		}

SYMBOL TABLE:
	An important part of this assignment is the development of a
	primitive symbol table.  It must understand entering and leaving
	scopes, although for the purposes of this assignment, there is
	only the global scope, and block scopes delimited by curly braces.
	There is also only one namespace, because we will not be supporting
	structs, unions, enums, or labels.

	The symbol table entry should have a place for storing a single
	integer value, which will be used by the interpreter whenever
	an assignment to a variable takes place.  

	The symbol table should detect and report when a duplicate
	declaration is encountered.

EXPRESSIONS AND STATEMENTS
	For this assignment, the only statement supported in the syntax
	is an expression statement.  Whenever one has been reduced, your
	interpreter should print the integer value of the expression,
	along with the input filename and line number.
	
	You must be able to syntatically recognize the complete C expression
	grammar.  However, since your intepreter will only perform integer
	arithmetic, expressions such as a[i] or p->m should generate a warning
	and should be assigned some arbitrary harmless value such as 0 or 1.
	Things which involve pointers or sizeof also have no meaningful value
	to your interpreter.
	
	Likewise, string literals and characters literals do not have
	a meaningful value.  Real numbers could be truncated to integers
	with a warning.  Don't worry about signed/unsigned issues or
	integer range/overflow problems for this problem.

	You do not need to recognized abstract type names or typecasts.

LVALUES
	You may find that some modification of the C grammar, as presented
	in the ISO standard or in H&S, is required to implement this
	interpreter in a simple and straightforward manner.  In particular,
	assignment expressions can be assumed to be of the form:
		lvalue assignment_operator expr
	An lvalue is simply an identifier, but in this context, its
	semantic value is the place where you store the value (the symbol
	table entry) as opposed to its actual integer value.

	Other lvalues, such as a structure/union selection, pointer 
	deref, array access, parenthesized lvalue, etc. need not be
	implemented at this time.

	You may need to "kluge it" to recover gracefully from an undefined
	identifier appearing where an lvalue is needed.

AMBIGUOUS GRAMMAR:
	The grammar in the C standard and H&S is in strict BNF notation.
	It may be more convenient, elegant and readable to consolidate
	the grammar into one which is ambiguous, and uses the Bison
	precedence and associativity mechanisms to resolve the conflicts.

ERRORS AND WARNINGS:
	If the input contains a lexical or syntax error, it is acceptable
	to report the filename and line number of the error (or at least
	close to it, you might be off by one line) and then exit.

	Semantic errors, such as dividing by 0, or using an undefined variable,
	should be reported with filename/line#, but processing of the
	input should continue.

EXAMPLE INPUT AND OUTPUT:
	The file below is shown with line numbers, to make it easier to
	correlate with the output.

     1  int g1;
     2  int g2,g3,g4;
     3  
     4  f()
     5  {				//Start of new scope
     6   int f1;
     7          f1=3;
     8          g2=3;
     9          {			//Here comes a new, nested scope
    10                  int ff1;
    11                          ff1=10;
    12                          f1=4;
    13                          g2=200;
    14          }
    15          --f1;			//Old value restored
    16          f1=g2,55;		//Oh no, a comma operator
    17          f1;			
    18          ff1;			// This is out of scope now
    19          g3=g1->bad;		// Note recovery from this
    20          11.33;
    21          +99;			//Yeah, a unary + operator
    22          foo=9;			//Hey, no core dump here either
    23          -1>>3;			//Don't worry about signed/unsigned
    24          g1=g2?g3:g4;		//Ternary operator
    25  }


$ cpp test.c | ./expr
test.c:7: exprval=3
test.c:8: exprval=3
test.c:11: exprval=10
test.c:12: exprval=4
test.c:13: exprval=200
test.c:15: exprval=3
test.c:16: exprval=55
test.c:17: exprval=200
test.c:18:Error:Undefined variable ff1
test.c:18: exprval=0
test.c:19:Warning:Struct/union not implemented
test.c:19: exprval=0
test.c:20:Warning:Truncating real number to integer
test.c:20: exprval=11
test.c:21: exprval=99
test.c:22:Error:Undefined variable foo
test.c:22: exprval=9
test.c:23: exprval=-1
test.c:24: exprval=0

