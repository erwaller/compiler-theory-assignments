%!PS-Adobe-3.0
%%Creator: groff version 1.19.1
%%CreationDate: Thu Oct 16 23:18:44 2008
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Courier
%%DocumentSuppliedResources: file astwrong.eps
%%+ file typesast.eps
%%+ file scopes.eps
%%+ file astexpr.eps
%%+ procset grops 1.19 1
%%Pages: 28
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.19 1
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Courier
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier@0 ENC0/Courier RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 122.742(ECE466:Compilers Unit)69.336 60 R(3/pg 1)
2.25 E(\2512008 Jef)126.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Bold@0 SF(Semantic Analysis of the C language)166.404 120 Q/F2 13
/Times-Italic@0 SF 1.034(In this unit we be)105.336 156 R 1.033
(gin discussion of semantic analysis with an)-.52 F
(emphasis on the C langua)105.336 171 Q -.13(ge)-.13 G(.)-.065 E F1
(Compile-T)189.934 201 Q(ime vs Run-T)-.234 E(ime)-.234 E/F3 13
/Times-Roman@0 SF 2.217 -1.04(We c)33.336 237 T .137
(an speak of the compiler as e)1.04 F .137(xisting in tw)-.195 F 3.388
(ow)-.13 G .138(orlds: compile-time, when the compiler)-3.518 F 2.68
(is actually e)33.336 252 R -.195(xe)-.195 G 2.679
(cuting, and run-time, when the tar).195 F 2.679(get program will be e)
-.234 F -.195(xe)-.195 G 5.929(cuting. The).195 F .118(compiler perform\
s actions, creates data structures, etc. at compile time which result i\
n the)33.336 267 R 2.417(emission of code which, in turn, when e)33.336
282 R -.195(xe)-.195 G 2.417(cuted at run-time, creates and manipulates)
.195 F -.325(va)33.336 297 S(lues and tak).325 E
(es other actions speci\214ed in the original source code.)-.13 E 2.238
(In contrast, an interpreter e)33.336 318 R 2.239
(xists in only one time, because source code is acted upon)-.195 F
(immediately)33.336 333 Q 7.293(.W)-.845 G 4.043(ec)-8.333 G .792
(ould think of a compiler as an interpreter)-4.043 F 4.042(,t)-.52 G
.792(he actions of which are to)-4.042 F(emit the tar)33.336 348 Q
(get code \(e.g. assembly language on the tar)-.234 E(get machine\).)
-.234 E 5.236(Certain v)33.336 369 R 5.237
(alues can be computed at compile-time, such as the size of v)-.325 F
(ariables,)-.325 E -.195(ex)33.336 384 S 1.409(pressions in).195 F -.26
(vo)-.52 G 1.409(lving constants, etc.).26 F 1.409
(Others, such as the v)7.909 F 1.409(alue inside of a v)-.325 F 1.409
(ariable, are)-.325 F 2.361(indeterminate at compile-time.)33.336 399 R
-.195(Pa)8.861 G 2.361(rt of the optimizer').195 F 5.611(sj)-.715 G
2.362(ob is to trace out the \215o)-5.611 F 5.612(wo)-.325 G(f)-5.612 E
.173
(control and data through the program and attempt to predict, to the e)
33.336 414 R .172(xtent possible, useful)-.195 F(constraints on v)33.336
429 Q(alues which may lead to simpli\214cation or elimination of tar)
-.325 E(get code.)-.234 E F1(Syntax-Dir)188.673 459 Q(ected T)-.234 E
(ranslation)-.962 E F3 2.899(In the pre)33.336 495 R 2.899
(vious unit we ha)-.325 F 3.289 -.195(ve s)-.26 H 2.899
(een the use of embedded \(semantic\) actions within a).195 F 2.179
(yacc/bison grammar)33.336 510 R 5.428(,a)-.52 G 2.178
(nd the passing of synthesized and inherited attrib)-5.428 F 2.178
(utes along the)-.26 F -.325(va)33.336 525 S 1.83(lue stack.).325 F 1.83
(It is possible to use these tools to perform the translation from sour\
ce to)8.33 F(tar)33.336 540 Q 1.68
(get language in one pass, as the source language is being parsed.)-.234
F 1.679(This is kno)8.179 F 1.679(wn as)-.325 F F1(Syntax-Dir)33.336 555
Q(ected T)-.234 E(ranslation)-.962 E F3 6.5(.F)C(or e)-6.695 E(xample:)
-.195 E/F4 10/Courier@0 SF(expr: IDENT)33.336 567 Q
({$$=gen_emit_loadvar\($1\);})164.4 E(|expr '+' expr)90.936 579 Q
({$$=gen_emit_add\($1,$3\);})88.8 E F3 4.052(Assume that the le)33.336
594 R -.195(xe)-.195 G 7.302(rr).195 G 4.052(eturns, as the semantic v)
-7.302 F 4.052(alue for IDENT)-.325 F 7.302(,i)-.962 G 4.052(ts name.)
-7.302 F(Then)10.552 E/F5 13/Courier@0 SF(gen_emit_loadvar)33.336 609 Q
F3 1.283(might emit the tar)4.533 F 1.282
(get assembly code to load that v)-.234 F 1.282(ariable name)-.325 F
2.047(into a re)33.336 624 R(gister)-.195 E 5.297(,t)-.52 G 2.047
(he return v)-5.297 F 2.047(alue being the name of that re)-.325 F
(gister)-.195 E 8.547(.T)-.715 G 2.047(hen when)-8.547 F F5 2.048
(expr +)5.297 F(expr)33.336 639 Q F3 1.658(is reduced,)4.909 F F5
(gen_emit_add)4.908 E F3 1.658
(emits an assembly language instruction to add the)4.908 F .012
(contents of the tw)33.336 654 R 3.262(or)-.13 G -.195(eg)-3.262 G .012
(isters, returning a ne).195 F 3.262(wr)-.325 G -.195(eg)-3.262 G(ister)
.195 E 6.512(.T)-.715 G .012(his becomes the semantic v)-6.512 F .013
(alue if)-.325 F(this is a sub-e)33.336 669 Q(xpression in a lar)-.195 E
(ger e)-.234 E(xpression, etc.)-.195 E 2.202
(At one time, a one-pass compiler w)33.336 690 R 2.201(as e)-.13 F 2.201
(xtremely desirable, because memory and disk)-.195 F 5.649(space w)
33.336 705 R 5.649(as limited.)-.13 F(Ho)12.149 E(we)-.325 E -.195(ve)
-.325 G 6.689 -.52(r, w).195 H 5.649(riting a one-pass compiler).52 F
8.9(,u)-.52 G 5.65(sing syntax-directed)-8.9 F .134
(translation, becomes cumbersome as language comple)33.336 720 R .134
(xity gro)-.195 F .134(ws, because the structure of)-.325 F .591(the so\
urce language grammar might not re\215ect well the order in which tar)
33.336 735 R .592(get code needs)-.234 F 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(3/pg 2)
2.25 E(\2512008 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF(to be generated.)33.336 120 Q 8.115(In modern compile\
rs, the embedded semantic actions create an intermediate)33.336 141 R
.317(representation \(IR\) in memory)33.336 156 R 3.567(,w)-.845 G .318
(hich is then re-proceesed one or multiple times, re\214ning)-3.567 F
.179(and optimizing it, and \214nally transforming it into the tar)
33.336 171 R .179(get language.)-.234 F -1.04(We)6.679 G -.13('l)1.04 G
3.429(ld).13 G .179(iscuss IR in)-3.429 F .781(more detail in Unit 5.)
33.336 186 R .781(Not all of the IR corresponds to e)7.281 F -.195(xe)
-.195 G .781(cutable \(run-time\) constructs.).195 F .63
(The compiler may use the same techniques to b)33.336 201 R .629
(uild compile-time representations of data)-.26 F(types.)33.336 216 Q/F2
13/Times-Bold@0 SF(Abstract Syntax T)205.833 246 Q -.234(re)-.962 G(es)
.234 E F1(Man)33.336 282 Q 5.046(yc)-.195 G 1.796
(ompilers use a graphical form of representation kno)-5.046 F 1.796
(wn as an)-.325 F F2 1.797(Abstract Syntax)5.047 F -1.56 -.962(Tr e)
33.336 297 T(e).962 E F1 4.834(\(AST\). It)4.834 F 1.584(is called abst\
ract because, while it is related to the parse tree, it is not)4.834 F
4.357(literally the parse tree.)33.336 312 R 4.357
(Certain grammar symbols, which e)10.857 F 4.358
(xist purely for parsing)-.195 F .43
(purposes, might not be re\215ected in the AST)33.336 327 R 3.68(,o)
-.962 G 3.68(rt)-3.68 G .43(he AST may ha)-3.68 F .82 -.195(ve a d)-.26
H(if).195 E .429(ferent ordering or)-.325 F(structure.)33.336 342 Q .855
(An AST consists of nodes and edges.)33.336 363 R .855(Each node may ha)
7.355 F 1.245 -.195(ve a)-.26 H(ttrib).195 E .856
(utes associated with it.)-.26 F .777(In implementing an AST in C, the \
nodes are often held in dynamically allocated structs,)33.336 378 R
(with the edges being pointers within those structs.)33.336 393 Q 1.748
(In man)33.336 414 R 4.998(yc)-.195 G 1.749
(ases, construction of an AST using embedded actions is straightforw)
-4.998 F 1.749(ard and)-.13 F(follo)33.336 429 Q .425
(ws naturally from the actual syntax.)-.325 F .425(As an e)6.925 F .425
(xample, let')-.195 F 3.675(sl)-.715 G .424(ook at a passage from the)
-3.675 F("e)33.336 444 Q(xpression calculator" grammar)-.195 E 3.25(,r)
-.52 G(e-written to generate an AST)-3.25 E(:)-.65 E/F3 10/Courier@0 SF
21.6(expr: NUM)33.336 456 R({$$=ast_newnode\(AST_NUM\);)97.2 E
($$->attributes.num=yylval.num;})263.736 468 Q(|expr '+' expr)90.936 480
Q({$$=ast_newnode\(AST_BINOP\);)31.2 E($$->attributes.binop='+';)263.736
492 Q($$->left=$1;)263.736 504 Q($$->right=$2;})263.736 516 Q F1 1.732(\
In the \214rst rule, an AST node is created for a terminal, and is \214\
lled in with all of the)33.336 537 R 2.132(information needed re)33.336
552 R -.065(ga)-.195 G 2.132
(rding that terminal \(in this case, the numeric v).065 F 2.132
(alue which the)-.325 F(le)33.336 567 Q -.195(xe)-.195 G 3.25(rp).195 G
(asses up in)-3.25 E/F4 13/Courier@0 SF(yylval)3.25 E F1(.\))A .146
(In the second rule, assume that the semantic v)33.336 588 R .146
(alues from the tw)-.325 F 3.396(oi)-.13 G .147
(nstances of the rhs non-)-3.396 F(terminal)33.336 603 Q F4(expr)3.295 E
F1 .045(are pointers to correct AST representations of those sube)3.295
F 3.294(xpressions. Then)-.195 F .652(by creating a ne)33.336 618 R
3.902(wA)-.325 G .653
(ST node to represent the addition operation, and connecting it to the)
-3.902 F(tw)33.336 633 Q 3.458(os)-.13 G(ube)-3.458 E .208
(xpressions, the semantic v)-.195 F .208(alue associated with the lhs)
-.325 F F4(expr)3.458 E F1 .208(is, by induction, the)3.458 F
(correct representation of that e)33.336 648 Q(xpression.)-.195 E 0 Cg
EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(3/pg 3)
2.25 E(\2512008 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E 0 0 468 655
-182.198 255 33.336 302.199 PBEGIN
%%BeginDocument: astexpr.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: astexpr.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Thu Oct  2 03:08:21 2008
%%For: hak@lex ()
%%BoundingBox: 0 0 655 255
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 255 moveto 0 0 lineto 655 0 lineto 655 255 lineto closepath clip newpath
-44.3 316.4 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hyphen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
/Times-Italic /Times-Italic-iso isovec ReEncode
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 2025 4500 765 765 0 360 DrawEllipse gs col0 s gr

/Times-Roman-iso ff 200.00 scf sf
1800 4200 m
gs 1 -1 sc (NUM) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1425 4575 m
gs 1 -1 sc (value=3) col0 sh gr
% Ellipse
n 4650 4500 765 765 0 360 DrawEllipse gs col0 s gr

/Times-Roman-iso ff 200.00 scf sf
4425 4200 m
gs 1 -1 sc (NUM) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
4050 4575 m
gs 1 -1 sc (value=4) col0 sh gr
% Ellipse
n 10875 4500 765 765 0 360 DrawEllipse gs col0 s gr

/Times-Roman-iso ff 200.00 scf sf
10650 4200 m
gs 1 -1 sc (NUM) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
10275 4575 m
gs 1 -1 sc (value=4) col0 sh gr
% Ellipse
n 8100 4500 765 765 0 360 DrawEllipse gs col0 s gr

/Times-Roman-iso ff 200.00 scf sf
7875 4200 m
gs 1 -1 sc (NUM) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
7500 4575 m
gs 1 -1 sc (value=3) col0 sh gr
% Ellipse
n 9375 2700 765 765 0 360 DrawEllipse gs col0 s gr

% Polyline
gs  clippath
1583 3782 m 1595 3723 l 1447 3694 l 1559 3747 l 1435 3752 l cp
eoclip
n 1200 3675 m
 1575 3750 l gs col0 s gr gr

% arrowhead
n 1435 3752 m 1559 3747 l 1447 3694 l  col0 s
% Polyline
gs  clippath
4125 3858 m 4151 3804 l 4016 3737 l 4110 3818 l 3989 3791 l cp
eoclip
n 3825 3675 m
 4125 3825 l gs col0 s gr gr

% arrowhead
n 3989 3791 m 4110 3818 l 4016 3737 l  col0 s
% Polyline
gs  clippath
8443 3739 m 8485 3781 l 8593 3674 l 8487 3738 l 8550 3631 l cp
eoclip
n 9075 3150 m
 8475 3750 l gs col0 s gr gr

% arrowhead
n 8550 3631 m 8487 3738 l 8593 3674 l  col0 s
% Polyline
gs  clippath
10416 3857 m 10456 3812 l 10343 3711 l 10413 3814 l 10303 3756 l cp
eoclip
n 9675 3150 m
 10425 3825 l gs col0 s gr gr

% arrowhead
n 10303 3756 m 10413 3814 l 10343 3711 l  col0 s
% Polyline
gs  clippath
8629 2208 m 8648 2151 l 8504 2103 l 8609 2170 l 8485 2160 l cp
eoclip
n 8175 2025 m
 8625 2175 l gs col0 s gr gr

% arrowhead
n 8485 2160 m 8609 2170 l 8504 2103 l  col0 s
% Polyline
n 750 1050 m 6900 1050 l 6900 3150 l 750 3150 l
 cp gs col0 s gr 
/Times-Roman-iso ff 200.00 scf sf
900 1500 m
gs 1 -1 sc (expr:) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1275 1725 m
gs 1 -1 sc (expr '+' expr {$$=ast_new\(BINOP\);) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
2550 2130 m
gs 1 -1 sc ($$->left=$1;$$->right=$3;$$->op='+';}) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1275 2550 m
gs 1 -1 sc (| NUM            {$$=ast_new\(NUMBER\);) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
1275 2805 m
gs 1 -1 sc (                            $$->value=yylval.number;}) col0 sh gr
/Times-Italic-iso ff 250.00 scf sf
2325 3450 m
gs 1 -1 sc (BEFORE REDUCING) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
900 3750 m
gs 1 -1 sc ($1) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
3450 3675 m
gs 1 -1 sc ($3) col0 sh gr
/Times-Italic-iso ff 250.00 scf sf
7950 1650 m
gs 1 -1 sc (AFTER REDUCING) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
9150 2400 m
gs 1 -1 sc (BINOP) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
8850 3000 m
gs 1 -1 sc (lleft) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
9450 3000 m
gs 1 -1 sc (right) col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
8850 2700 m
gs 1 -1 sc (op='+') col0 sh gr
/Times-Roman-iso ff 200.00 scf sf
7800 2100 m
gs 1 -1 sc ($$) col0 sh gr
/Times-Italic-iso ff 250.00 scf sf
2250 1350 m
gs 1 -1 sc (RULES AND EMBEDDED ACTIONS) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND/F1 13/Times-Bold@0 SF -.962(Ty)229.72 353.199 S(pe Systems).962
E/F2 13/Times-Roman@0 SF 3.33(Almost all programming languages ha)33.336
389.199 R 3.72 -.195(ve t)-.26 H 3.33(ype systems.).195 F -1.04(Ty)9.83
G 3.33(pe systems are a w)1.04 F 3.331(ay of)-.13 F(allo)33.336 404.199
Q 1.281(wing programmer to e)-.325 F 1.281
(xpress intent rather than mechanics.)-.195 F 1.281(The compiler must k)
7.781 F(eep)-.13 E(track of the types of v)33.336 419.199 Q(ariables, e)
-.325 E(xpressions, etc. in order to generate the proper code.)-.195 E
1.094
(Enforcement of type rules catches certain types of programmer errors.)
33.336 440.199 R 1.095(Some languages)7.595 F 2.616(are v)33.336 455.199
R 2.616(ery strongly typed, to the e)-.195 F 2.616(xtent that the)-.195
F 5.866(ys)-.195 G 2.616(imply can')-5.866 F 5.866(td)-.234 G 5.865(oc)
-5.866 G 2.615(ertain things which)-5.865 F .159
(violate their type model.)33.336 470.199 R .16
(Other languages such as C are more loosely typed: the compiler)6.659 F
(may complain, b)33.336 485.199 Q(ut the programmer can generally o)-.26
E -.195(ve)-.195 G(rride type-safety decisions.).195 E 2.479
(Programming languages can ha)33.336 506.199 R 2.869 -.195(ve b)-.26 H
2.479(oth static and dynamic typing.).195 F 5.728(Ch)8.978 G 2.478
(as only static.)-5.728 F 2.171
(Dynamic typing requires run-time support, e.g.)33.336 521.199 R 2.171
(inserting a tag into objects to encode)8.671 F 2.902
(their type and cause the e)33.336 536.199 R -.195(xe)-.195 G 2.901
(cution of the appropriate method.).195 F 2.901(Interpreted languages)
9.401 F(typically ha)33.336 551.199 Q .39 -.195(ve g)-.26 H
(reater support for dynamic typing.).195 E -1.04(We)33.336 572.199 S
-.13('l)1.04 G 3.25(ls).13 G(oon see ho)-3.25 E 3.25(wA)-.325 G
(STs can be used to represent type information.)-3.25 E F1(The Symbol T)
217.006 617.199 Q(able)-1.196 E F2 2.55
(Symbolic names are a critical part of an)33.336 653.199 R 5.8(yp)-.195
G 2.55(rogramming language.)-5.8 F 2.551(The symbol table)9.05 F .856
(subsystem of a compiler is responsible for k)33.336 668.199 R .856
(eeping track of which symbolic names ha)-.13 F -.195(ve)-.26 G 2.036
(been seen, and the properties associated with each instance.)33.336
683.199 R 2.036(In the C language, these)8.536 F .051
(names are called "identi\214ers", and there are 7 dif)33.336 698.199 R
.051(ferent purposes for which identi\214ers may)-.325 F 3.645
(be used \(not counting pre-processor uses\): v)33.336 713.199 R 3.646
(ariable \(the ISO standard calls this an)-.325 F 2.703("object"\) name\
, function name, struct tag, union tag, enum tag, typedef name, label,)
33.336 728.199 R(enumeration constant, struct member)33.336 743.199 Q
3.25(,u)-.52 G(nion member)-3.25 E(.)-.715 E 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(3/pg 4)
2.25 E(\2512008 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 2.547(Note that, from a le)33.336 120 R 2.547
(xical standpoint, there is no distinction between these uses.)-.195 F
(The)9.047 E(re)33.336 135 Q 1.284(gular e)-.195 F 1.284
(xpression pattern for a v)-.195 F 1.283
(ariable name is clearly the same as that for a function)-.325 F
(name, or a structure tag.)33.336 150 Q .668
(The symbol table is, conceptually)33.336 171 R 3.918(,a)-.845 G 3.918
(na)-3.918 G(ssociati)-3.918 E 1.058 -.195(ve a)-.325 H .668
(rray which is inde).195 F -.195(xe)-.195 G 3.918(db).195 G 3.918(yt)
-3.918 G .668(he identi\214er)-3.918 F 2.214
(string, and which yields a node gi)33.336 186 R 2.213
(ving the use of the identi\214er \(one of the 7 choices)-.325 F(abo)
33.336 201 Q -.195(ve)-.195 G .006(\), and a set of attrib).195 F .006
(utes which v)-.26 F .006(aries by use.)-.325 F .006(The interf)6.506 F
.006(ace to the symbol table is, in)-.13 F 6.423(as)33.336 216 S 3.173
(implistic sense, pro)-6.423 F 3.173(vided by tw)-.195 F 6.423(of)-.13 G
3.173(unctions: one to query the table with a name,)-6.423 F .029
(returning the associated symbol table entry if is de\214ned.)33.336 231
R .03(The other function creates a ne)6.53 F(w)-.325 E .268
(entry in the symbol table with a speci\214ed name.)33.336 246 R .268
(This model is complicated by scope and)6.768 F(namespace rules.)33.336
261 Q .634(Generally speaking, in the C language, identi\214ers must be\
 declared before the)33.336 282 R 3.884(ya)-.195 G .634(re used.)-3.884
F(There are e)33.336 297 Q(xceptions:)-.195 E 3.25<8373>33.336 312 S
(truct and union tags may be used before their member list is declared.)
-3.25 E 3.25<8373>33.336 327 S(tatement labels may be used in a)-3.25 E
/F2 13/Courier@0 SF(goto)3.25 E F1(before their de\214nition is seen.)
3.25 E 6.345<8366>33.336 342 S 3.095(unctions may be called without \
\214rst declaring the identi\214er to be the name of a)-6.345 F 3.504
(function. When)33.336 357 R .254(this occurs, an implicit declaration \
is made, and the identi\214er is assumed)3.504 F(to ha)33.336 372 Q .39
-.195(ve t)-.26 H(ype).195 E F2(\(int \(\)\))3.25 E F1 3.25(,af)C
(unction returning int and taking an unkno)-3.25 E(wn ar)-.325 E
(gument list.)-.234 E/F3 13/Times-Bold@0 SF(Symbol T)202.576 402 Q
(able Interface)-1.196 E F1 2.882
(The symbol table could be conceptually thought of as ha)33.336 438 R
2.881(ving the follo)-.26 F 2.881(wing abstract)-.325 F(interf)33.336
453 Q(ace:)-.13 E 3.25<8363>33.336 483 S(reate: Create a ne)-3.25 E 1.69
-.845(w, e)-.325 H(mpty symbol table.).845 E 3.25<8364>33.336 498 S
(estro)-3.25 E(y: Destro)-.13 E 3.25(yas)-.13 G
(ymbol table including an)-3.25 E 3.25(ys)-.195 G
(torage which it consumes.)-3.25 E 5.483<836c>33.336 513 S 2.233
(ookup: Gi)-5.483 F -.195(ve)-.325 G 5.483(na).195 G 5.483(ne)-5.483 G
2.233(xisting symbol table and scope, a name, and a namespace class,)
-5.678 F 2.101(return the associated symbol table entry)33.336 528 R
5.351(,i)-.845 G 5.35(fi)-5.351 G 5.35(te)-5.35 G 2.1
(xists, otherwise return the f)-5.545 F 2.1(act that the)-.13 F 1.201
(symbol does not e)33.336 543 R 4.451(xist. The)-.195 F 1.202
(lookup operation must go through the stack of scopes until)4.451 F
2.437(the outermost \(\214le scope\) before concluding that the entry d\
oes not e)33.336 558 R 5.687(xist. The)-.195 F(entry)5.687 E
(contains attrib)33.336 573 Q(utes, which will be discussed belo)-.26 E
-.845(w.)-.325 G 3.302<8365>33.336 588 S .052(nter: Gi)-3.302 F -.195
(ve)-.325 G 3.302(na).195 G 3.303(ne)-3.302 G .053
(xisting symbol table, a name, a namespace class, and a set of attrib)
-3.498 F(utes,)-.26 E .895(enter this symbol in the table.)33.336 603 R
4.144(Ab)7.394 G .894(oolean parameter can determine whether)-4.144 F
4.144(,i)-.52 G 4.144(fas)-4.144 G(ymbol)-4.144 E .211
(with the same name and namespace already e)33.336 618 R .212
(xists in the table, to replace the de\214nition or)-.195 F
(to return an error)33.336 633 Q(.)-.715 E F3(Identi\214ers and attrib)
198.13 663 Q(utes)-.26 E F1 1.007
(Here is a possibly incomplete list of the kinds of attrib)33.336 699 R
1.007(utes which the compiler needs to)-.26 F -.13(ke)33.336 714 S
(ep for each identi\214er class:).13 E 3.25<8376>33.336 729 S
(ariable: type, storage class, of)-3.575 E
(fset within stack frame \(for automatic storage class only\))-.325 E
5.622<8366>33.336 744 S 2.372
(unction: type \(includes return type and ar)-5.622 F 2.373
(guments\), storage class \(e)-.234 F 2.373(xtern or static\),)-.195 F 0
Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(3/pg 5)
2.25 E(\2512008 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .504(presence of)33.336 120 R/F2 13/Courier@0 SF
(inline)3.754 E F1(speci\214er)3.754 E 3.754(,w)-.52 G .504
(hether a de\214nition for the function \(the actual code\) has)-3.754 F
(been seen yet.)33.336 135 Q 6.225<8373>33.336 150 S 2.976(truct/union \
tag: symbol table containing member de\214nitions, whether de\214nition\
 is)-6.225 F(complete or not.)33.336 165 Q 3.748<8365>33.336 180 S .498
(num tag: once the de\214nition is complete, nothing.)-3.748 F .498
(One might try to link back to all of)6.998 F(the enum constant names w\
hich are de\214ned under this tag, for error reporting purposes.)33.336
195 Q 3.903<8365>33.336 210 S .653(num constant: v)-3.903 F 3.903
(alue. One)-.325 F .653(might w)3.903 F .653
(ant to link to the enum tag too.)-.13 F .653(In the C language,)7.153 F
.685(identi\214ers which are enum constants simply become ints in the e)
33.336 225 R .685(xpression, i.e. the enum)-.195 F .623
(tag does not propag)33.336 240 R 3.873(ate. If)-.065 F F2(x)3.873 E F1
.623(is of type)3.873 F F2 .623(enum e)3.873 F F1 3.873(,t)C .623
(he type of the e)-3.873 F(xpression)-.195 E F2(\(x\))3.874 E F1(is)
3.874 E F2(int)3.874 E F1(,)A(not)33.336 255 Q F2(enum e)3.25 E F1(.)A
3.25<8373>33.336 270 S(tatement label: W)-3.25 E(e')-1.04 E(ll ha)-.13 E
.39 -.195(ve t)-.26 H 3.25(od).195 G
(efer discussion of this until code generation is co)-3.25 E -.195(ve)
-.195 G(red.).195 E 3.25<8374>33.336 285 S(ypedef name: type.)-3.25 E
3.25<8373>33.336 300 S(truct/union member: type, of)-3.25 E
(fset \(within struct only\), bit \214eld width and bit of)-.325 E
(fset.)-.325 E/F3 13/Times-Bold@0 SF(Scopes and V)209.785 330 Q
(isibility)-.481 E F1 6.697(Ap)33.336 366 S 3.447
(articular instance of an identi\214er is not necessarily)-6.697 F F3
(visible)6.697 E F1 3.447(at e)6.697 F -.195(ve)-.325 G 3.446
(ry line of the).195 F 3.25(program. The)33.336 381 R 3.25(Cs)3.25 G
(tandard identi\214es the follo)-3.25 E(wing)-.325 E F2(scopes)3.25 E F1
(of visibility:)3.25 E 4.095<8346>33.336 411 S .845(ile scope: an ident\
i\214er with \214le scope is visible from its point of declaration unti\
l the)-4.095 F 2.979(end of that)33.336 426 R F2(.c)6.229 E F1 6.229
(\214le. File)6.229 F 2.979
(scope applies to declarations seen outside of an)6.229 F 6.228(yf)-.195
G(unction)-6.228 E(de\214nitions, i.e.)33.336 441 Q
("global" declarations.)6.5 E 4.682<8342>33.336 471 S 1.433(lock scope:\
 An opening curly brace within the body of a function introduces a ne)
-4.682 F(w)-.325 E .882(block scope.)33.336 486 R .881(Identi\214ers de\
clared within a block are visible from that point until the end)7.382 F
.389(\(closing curly brace\) of that block.)33.336 501 R .389
(Note that just as blocks are nestable, so too are block)6.889 F 4.26
(scopes. Block)33.336 516 R 1.009(scopes can be thought of as transluce\
nt with the innermost block on top.)4.26 F 4.896(Declarations which hap\
pen in an inner block obscure the visibility of identi\214ers)33.336 531
R .798(appearing in an outer block, until that inner block is done.)
33.336 546 R .798(Also, declarations in a block)7.298 F
(scope may obscure \214le scope.)33.336 561 Q 4.847<8346>33.336 591 S
1.597(unction scope: Function scope is associated with the outermost bl\
ock of a function.)-4.847 F .558(Function and block scopes are v)33.336
606 R .558(ery similar)-.195 F 3.808(,t)-.52 G .558
(he primary distinction being in the handling)-3.808 F .108
(of statement labels.)33.336 621 R .108(Labels are al)6.608 F -.13(wa)
-.13 G .108(ys placed into the scope of the function in which the).13 F
(y)-.195 E(appear)33.336 636 Q 9.056(.I)-.715 G 5.806(fal)-9.056 G 2.556
(abel is de\214ned inside of an inner block scope, it is nonetheless vi\
sible)-5.806 F 3.003(throughout the entire function.)33.336 651 R 3.003
(Note that in the de\214nition of a function, the formal)9.503 F .997(p\
arameters \(which appear inside the parentheses, plus the declarators b\
etween there and)33.336 666 R .247(the opening brace in classic C\) ha)
33.336 681 R .638 -.195(ve a s)-.26 H .248(cope as if the).195 F 3.498
(yh)-.195 G .248(ad been declared at the be)-3.498 F(ginning)-.195 E
(of the main block of the function.)33.336 696 Q 4.275<8350>33.336 726 S
1.024(rototype scope: The C standard uses this term to handle the case \
of identi\214ers which)-4.275 F
(appear in a prototyped function declarator)33.336 741 Q 3.25(,e)-.52 G
(.g.:)-3.25 E 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(3/pg 6)
2.25 E(\2512008 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 10
/Courier@0 SF(int f;)33.336 117 Q(unsigned fu\(int a,double d\);)33.336
129 Q/F2 13/Times-Roman@0 SF 2.17(This is not the same as the)33.336 144
R/F3 13/Times-Italic@0 SF(de\214nition)5.42 E F2 2.17
(of the function, which includes the actual code)5.42 F .56
(associated with it.)33.336 159 R .56(The identi\214ers which appear in\
 the prototype are not meaningful, just)7.06 F .008
(the list of types of the ar)33.336 174 R .008
(guments, and so the introduction of this term "prototype scope" is)
-.234 F(of dubious v)33.336 189 Q(alue to the compiler)-.325 E(-writer)
-.26 E(.)-.715 E 0 0 357 357 -362 362 88.836 602 PBEGIN
%%BeginDocument: scopes.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: scopes.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Thu Oct 16 21:21:08 2008
%%For: hak@lex ()
%%BoundingBox: 0 0 357 362
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 362 moveto 0 0 lineto 357 0 lineto 357 362 lineto closepath clip newpath
-143.3 347.2 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
7.500 slw
n 5625 4575 m 5775 4575 l 5775 5775 l 5625 5775 l
 cp gs col0 s gr 
% Polyline
n 5625 4575 m 5775 4575 l 5775 4725 l 5625 4725 l
 cp gs col0 s gr 
% Polyline
n 5625 4875 m 5775 4875 l 5775 5025 l 5625 5025 l
 cp gs col0 s gr 
% Polyline
n 5625 5175 m 5775 5175 l 5775 5325 l 5625 5325 l
 cp gs col0 s gr 
% Polyline
n 5625 5475 m 5775 5475 l 5775 5625 l 5625 5625 l
 cp gs col0 s gr 
% Polyline
n 5250 3900 m 6075 3900 l 6075 4425 l 5250 4425 l
 cp gs col0 s gr 
% Polyline
n 4125 825 m 4275 825 l 4275 2025 l 4125 2025 l
 cp gs col0 s gr 
% Polyline
n 4125 825 m 4275 825 l 4275 975 l 4125 975 l
 cp gs col0 s gr 
% Polyline
n 4125 1125 m 4275 1125 l 4275 1275 l 4125 1275 l
 cp gs col0 s gr 
% Polyline
n 4125 1425 m 4275 1425 l 4275 1575 l 4125 1575 l
 cp gs col0 s gr 
% Polyline
n 4125 1725 m 4275 1725 l 4275 1875 l 4125 1875 l
 cp gs col0 s gr 
% Polyline
n 3750 150 m 4575 150 l 4575 675 l 3750 675 l
 cp gs col0 s gr 
% Polyline
n 7425 2175 m 7575 2175 l 7575 3375 l 7425 3375 l
 cp gs col0 s gr 
% Polyline
n 7425 2175 m 7575 2175 l 7575 2325 l 7425 2325 l
 cp gs col0 s gr 
% Polyline
n 7425 2475 m 7575 2475 l 7575 2625 l 7425 2625 l
 cp gs col0 s gr 
% Polyline
n 7425 2775 m 7575 2775 l 7575 2925 l 7425 2925 l
 cp gs col0 s gr 
% Polyline
n 7425 3075 m 7575 3075 l 7575 3225 l 7425 3225 l
 cp gs col0 s gr 
% Polyline
n 7050 1500 m 7875 1500 l 7875 2025 l 7050 2025 l
 cp gs col0 s gr 
% Polyline
n 5550 1650 m 5700 1650 l 5700 2850 l 5550 2850 l
 cp gs col0 s gr 
% Polyline
n 5550 1650 m 5700 1650 l 5700 1800 l 5550 1800 l
 cp gs col0 s gr 
% Polyline
n 5550 1950 m 5700 1950 l 5700 2100 l 5550 2100 l
 cp gs col0 s gr 
% Polyline
n 5550 2250 m 5700 2250 l 5700 2400 l 5550 2400 l
 cp gs col0 s gr 
% Polyline
n 5550 2550 m 5700 2550 l 5700 2700 l 5550 2700 l
 cp gs col0 s gr 
% Polyline
n 5175 975 m 6000 975 l 6000 1500 l 5175 1500 l
 cp gs col0 s gr 
% Polyline
gs  clippath
5982 4021 m 5987 4081 l 6138 4069 l 6017 4049 l 6134 4009 l cp
eoclip
n 6975 3975 m
 6000 4050 l gs col0 s gr gr

% arrowhead
n 6134 4009 m 6017 4049 l 6138 4069 l  col0 s
% Polyline
gs  clippath
7158 1651 m 7105 1622 l 7032 1755 l 7117 1665 l 7085 1784 l cp
eoclip
n 5850 3975 m
 7125 1650 l gs col0 s gr gr

% arrowhead
n 7085 1784 m 7117 1665 l 7032 1755 l  col0 s
% Polyline
gs  clippath
5846 1091 m 5825 1147 l 5965 1202 l 5865 1131 l 5987 1146 l cp
eoclip
n 7200 1650 m
 5850 1125 l gs col0 s gr gr

% arrowhead
n 5987 1146 m 5865 1131 l 5965 1202 l  col0 s
% Polyline
gs  clippath
4434 267 m 4393 312 l 4505 413 l 4437 311 l 4545 369 l cp
eoclip
n 5250 1050 m
 4425 300 l gs col0 s gr gr

% arrowhead
n 4545 369 m 4437 311 l 4505 413 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
5105 4083 m 5123 4025 l 4977 3981 l 5084 4045 l 4960 4038 l cp
eoclip
n 3375 3525 m
 5100 4050 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 4960 4038 m 5084 4045 l 4977 3981 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
5178 3933 m 5199 3877 l 5058 3822 l 5160 3894 l 5037 3878 l cp
eoclip
n 4200 3525 m
 5175 3900 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 5037 3878 m 5160 3894 l 5058 3822 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
6924 1673 m 6903 1616 l 6760 1668 l 6884 1656 l 6781 1725 l cp
eoclip
n 2775 3150 m
 6900 1650 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 6781 1725 m 6884 1656 l 6760 1668 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
6849 1823 m 6828 1766 l 6685 1819 l 6809 1806 l 6706 1875 l cp
eoclip
n 2775 3675 m 2925 3225 l
 6825 1800 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 6706 1875 m 6809 1806 l 6685 1819 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
5203 1068 m 5172 1016 l 5042 1095 l 5161 1059 l 5073 1146 l cp
eoclip
n 2550 2625 m
 5175 1050 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 5073 1146 m 5161 1059 l 5042 1095 l  col0 s
% Polyline
 [60 24 15 18 15 18 15 24 ] 0 sd
gs  clippath
5128 1217 m 5096 1166 l 4968 1246 l 5086 1209 l 4999 1297 l cp
eoclip
n 2400 3750 m 2550 2775 l
 5100 1200 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 4999 1297 m 5086 1209 l 4968 1246 l  col0 s
/Times-Roman ff 200.00 scf sf
2400 1950 m
gs 1 -1 sc (int i;) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 2460 m
gs 1 -1 sc (int f\(\)) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 2715 m
gs 1 -1 sc ({) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 2970 m
gs 1 -1 sc (     /*...*/) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 3225 m
gs 1 -1 sc (     {) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 3480 m
gs 1 -1 sc (            int x\(int a,int b\);) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 3735 m
gs 1 -1 sc (      }) col0 sh gr
/Times-Roman ff 200.00 scf sf
2400 3990 m
gs 1 -1 sc (}) col0 sh gr
/Times-Italic ff 200.00 scf sf
7125 3975 m
gs 1 -1 sc (current scope) col0 sh gr
/Times-Italic ff 200.00 scf sf
5400 3600 m
gs 1 -1 sc (proto) col0 sh gr
/Times-Italic ff 200.00 scf sf
7275 1275 m
gs 1 -1 sc (block) col0 sh gr
/Times-Italic ff 200.00 scf sf
5475 675 m
gs 1 -1 sc (function) col0 sh gr
/Times-Italic ff 200.00 scf sf
3975 -75 m
gs 1 -1 sc (global) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND .56(In implementing a symbol table, one approach might be to c\
reate a stack of scopes, each)33.336 629 R .874
(pointing to its associated symbol table.)33.336 644 R .874
(When looking up an identi\214er)7.374 F 4.124(,t)-.52 G .874
(he symbol table)-4.124 F 1.544(at the top of the stack, corresponding \
to the innermost scope, is consulted \214rst, then if)33.336 659 R .786
(nothing is found, the ne)33.336 674 R .786
(xt one, etc. until the bottom of the stack, representing \214le scope,)
-.195 F 1.169(is reached.)33.336 689 R 3.249 -1.04(To h)7.669 H 1.169
(andle the dif)1.04 F 1.169
(ferent namespaces, one could maintain an array of symbol)-.325 F 3.142
(tables for each scope, one element per name space.)33.336 704 R
(Alternati)9.642 E -.195(ve)-.325 G(ly).195 E 6.392(,o)-.845 G 3.142
(ne could add a)-6.392 F .592(namespace tag to each symbol table entry \
and only consider a match to occur if both the)33.336 719 R
(name and the namespace are identical.)33.336 734 Q 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(3/pg 7)
2.25 E(\2512008 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF .636(Generally it is an error when a declaration atte\
mpts to install a name in the symbol table)33.336 120 R 1.065(when that\
 same name \(in the same namespace\) is already installed in the curren\
t scope.)33.336 135 R(There are e)33.336 150 Q(xceptions:)-.195 E 4.45
<8352>33.336 165 S 1.201
(edeclaration of a function name is permitted as long as the ne)-4.45 F
4.451(wd)-.325 G 1.201(eclaration matches)-4.451 F .03(the e)33.336 180
R .03(xisting one in terms of type \(there are complicated rules for de\
termining whether tw)-.195 F(o)-.13 E(function prototypes are equi)
33.336 195 Q -.325(va)-.325 G(lent\) and storage class.).325 E 3.58
<8356>33.336 210 S .33(ariable declarations with)-5.023 F/F2 13
/Courier@0 SF(extern)3.58 E F1 .33
(storage class do not con\215ict with pre)3.58 F .33(vious or future)
-.325 F .737(declarations of the same v)33.336 225 R .737
(ariable without the)-.325 F F2(extern)3.986 E F1 3.986(,s)C 3.986(ol)
-3.986 G .736(ong as the declared types are)-3.986 F(equi)33.336 240 Q
-.325(va)-.325 G(lent.).325 E 4.67<8356>33.336 255 S 1.42
(ariable declarations in global scope without an e)-6.113 F 1.42
(xplicit storage class and without an)-.195 F 1.25
(initializer may be repeated, so long as the declared types are equi)
33.336 270 R -.325(va)-.325 G 4.5(lent. E.g.).325 F F2 1.249(int i;)
4.499 F(int i;)33.336 285 Q F1(is a v)3.25 E(alid C program.)-.325 E/F3
13/Times-Bold@0 SF(Namespaces)233.399 315 Q F1 .679(It is possible for \
the same identi\214er name, in the same scope, to refer to dif)33.336
351 R .68(ferent things.)-.325 F(The follo)33.336 366 Q
(wing are the groups, or)-.325 E F3(name spaces)3.25 E F1 3.25(,w)C
(hich C de\214nes:)-3.25 E 3.25<834c>33.336 381 S(abels)-3.25 E 4.406
<8354>33.336 396 S 4.406(ags: e.g.)-5.446 F F2(foo)4.406 E F1(in)4.406 E
F2 1.156(struct foo)4.406 F F1 4.406(,h)C -2.925 -.26(av e)-4.406 H
1.156(their o)4.666 F 1.156(wn namespace.)-.325 F(Ho)7.656 E(we)-.325 E
-.195(ve)-.325 G 2.196 -.52(r, s).195 H 1.156(truct, union).52 F
(and enum tags are all lumped together)33.336 411 Q 6.5(.E)-.715 G(.g.)
-6.5 E/F4 10/Courier@0 SF(int f;)33.336 423 Q(struct f {int f;} g;)
33.336 435 Q(//OK)110.4 E(union f {int h;} u;)33.336 447 Q
(//Not OK, tag f is already used)58.8 E F1 3.709<834d>33.336 462 S .46
(embers of structures or unions are in a separate namespace, and moreo)
-3.709 F -.195(ve)-.195 G 3.71(rs).195 G .46(uch struct)-3.71 F
(or union de\214nition forms an independent, pri)33.336 477 Q -.325(va)
-.325 G(te symbol table.).325 E 3.777<8341>33.336 492 S .527
(ll other identi\214er classes: enum constants, typedef names, v)-3.777
F .526(ariable or function names.)-.325 F F3(Storage Class and Duration)
190.597 522 Q F1 .218(The scope of a v)33.336 558 R .218
(ariable \(where it is le)-.325 F .219
(xically visible in the program\) is not necessarily the)-.195 F .205
(same as its lifetime.)33.336 573 R -1.443(Va)6.705 G .205
(riables declared in global \(\214le\) scope ha)1.443 F .594 -.195
(ve a d)-.26 H .204(uration which is the).195 F .348
(duration of the entire program.)33.336 588 R -1.443(Va)6.849 G .349
(riables declared inside a function scope generally ha)1.443 F -.195(ve)
-.26 G 4.342(ad)33.336 603 S 1.092
(uration which is that of the function.)-4.342 F(Ho)7.592 E(we)-.325 E
-.195(ve)-.325 G -.52(r,).195 G F2(static)4.862 E F1 -.325(va)4.342 G
1.092(riables declared within a).325 F(function ha)33.336 618 Q .39
-.195(ve l)-.26 H(ocal scope, b).195 E(ut global duration.)-.26 E 1.675
(The C syntax allo)33.336 639 R 1.675
(ws for certain storage class speci\214ers to be gi)-.325 F -.195(ve)
-.325 G 4.926(ni).195 G 4.926(nad)-4.926 G 1.676(eclaration or)-4.926 F
.706(function de\214nition to control duration.)33.336 654 R .705
(These are)7.205 F F3(auto)3.955 E F1(,)A F3 -.234(re)3.955 G(gister)
.234 E F1(,)A F3(exter)3.955 E(n)-.195 E F1(and)3.955 E F3(static)3.955
E F1 7.205(.T)C(he)-7.205 E .691(semantics of these storage classes are\
 well documented in the C standard and other te)33.336 669 R(xts)-.195 E
2.368(and will not be co)33.336 684 R -.195(ve)-.195 G 2.368(red here.)
.195 F 2.368(Storage class can only be applied to declarations of a)
8.868 F -.325(va)33.336 699 S 2.572(riable or function.).325 F 2.573
(As we shall see in a later unit, all that a storage class does is)9.072
F 3.439(determine whether the assembly-language symbol used to refer to\
 the address of a)33.336 714 R -.325(va)33.336 729 S .337
(riable or function is made visible outside of the local \214le.).325 F
.337(Therefore, it is meaningless,)6.837 F 1.333(and not allo)33.336 744
R 1.332(wed by C, to attach a storage class to a structure, union or en\
um de\214nition)-.325 F 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(3/pg 8)
2.25 E(\2512008 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF 1.784(\(i.e. the de\214nition of the members, as oppo\
sed to a declaration of a v)33.336 120 R 1.785(ariable of struct,)-.325
F 1.619(union or enum type\), to a typedef, to a label, or to a structu\
re or union member \(their)33.336 135 R
(storage class is "inherited" from the structure or union in which the)
33.336 150 Q 3.25(ya)-.195 G(ppear\).)-3.25 E 1.078
(When a storage class k)33.336 171 R -.195(ey)-.13 G -.13(wo).195 G
1.078(rd is omitted in a function or v).13 F 1.078
(ariable declaration, a def)-.325 F(ault)-.13 E .6
(storage class is assumed.)33.336 186 R .599
(In some cases, the lack of a storage class is not quite the same)7.1 F
.599(as when that same def)33.336 201 R .6
(ault storage class is speci\214ed e)-.13 F(xplicitly)-.195 E 7.1(.W)
-.845 G(e')-8.14 E .6(ll see a good e)-.13 F(xample)-.195 E 2.247
(of that in a subsequent unit when the link)33.336 216 R 2.246(er is co)
-.13 F -.195(ve)-.195 G 2.246(red, with re).195 F -.065(ga)-.195 G 2.246
(rd to the dif).065 F(ference)-.325 E(between)33.336 231 Q/F2 13
/Courier@0 SF 1.392(int i;)4.642 F F1(and)4.642 E F2 1.393
(extern int i;)4.642 F F1 1.393(in global scope.)4.643 F 1.393
(Or the reader may refer to)7.893 F(H&S or the C standard.)33.336 246 Q
/F3 13/Times-Bold@0 SF -.962(Ty)237.839 291 S(pes in C).962 E/F4 13
/Times-Italic@0 SF 1.475(This is not intended to be a compr)33.336 327 R
1.475(ehensive r)-.481 F(efer)-.481 E 1.475(ence on the C langua)-.481 F
1.735 -.13(ge, b)-.13 H 1.475(ut mer)-.13 F 1.475(ely to)-.481 F
(illustr)33.336 342 Q .414
(ate the issues facing the writer of a compiler for C.)-.195 F .415
(The r)6.915 F .415(eader is r)-.481 F(eferr)-.481 E .415(ed to the C)
-.481 F(langua)33.336 357 Q .26 -.13(ge s)-.13 H(tandar).13 E(d, the te)
-.481 E(xtbook, or Harbison & Steele)-.26 E(.)-.195 E F3(Scalar types)
233.575 372 Q F1 4.921(Cd)33.336 408 S 1.671
(e\214nes certain basic, scalar arithmetic types: the inte)-4.921 F 1.67
(gers and the reals.)-.195 F 1.67(In C99, the)8.17 F(comple)33.336 423 Q
3.337(xt)-.195 G .087(ype is also de\214ned.)-3.337 F(Inte)6.587 E .087
(gers consist of char)-.195 F 3.338(,s)-.52 G .088
(hort, int, long and long long sizes.)-3.338 F 1.616(Although commonly \
these are represented in 8, 16, 32, 32 and 64 bits, the C standard)
33.336 438 R .745(does not require an)33.336 453 R 3.995(yp)-.195 G .745
(articular number of bits for an)-3.995 F 3.996(yg)-.195 G -2.795 -.325
(iv e)-3.996 H 3.996(nt).325 G 3.996(ype. In)-3.996 F -.13(fa)3.996 G
.746(ct, the int type is).13 F .984
(speci\214cally designed to be the "best" inte)33.336 468 R .983
(ger type for a certain tar)-.195 F .983(get architecture.)-.234 F .983
(On a)7.483 F(nati)33.336 483 Q 2.183 -.195(ve 6)-.325 H 1.793(4-bit sy\
stem \(ia64, amd64, sparcv9, ppc64\) this might be 64 bits, while at th\
e).195 F .084
(other end of the spectrum, it might be 16 bits for an embedded system.)
33.336 498 R(Inte)6.583 E .083(ger types may)-.195 F 1.141
(be signed or unsigned.)33.336 513 R 1.141(By def)7.641 F 1.141
(ault, all inte)-.13 F 1.141
(ger types are signed unless speci\214cally made)-.195 F 2.491
(unsigned by the)33.336 528 R F2(unsigned)5.741 E F1 -.13(ke)5.741 G(yw)
-.065 E 2.49(ord \(or the appearance of a)-.13 F F2(U)5.74 E F1(suf)5.74
E 2.49(\214x on an inte)-.325 F(ger)-.195 E 5.296(constant\). An)33.336
543 R -.195(ex)5.296 G 2.046(ception is made for).195 F F2(char)5.296 E
F1 5.297(,w)C 2.047(hich the C standard says may be either)-5.297 F .506
(signed or unsigned \(most implementations mak)33.336 558 R 3.756(ei)
-.13 G 3.756(ts)-3.756 G .506(igned by def)-3.756 F 3.756(ault\). The)
-.13 F .505(C99 standard)3.756 F(introduces _Bool as an inte)33.336 573
Q(ger type.)-.195 E 1.66(The C standard de\214nes three le)33.336 594 R
-.195(ve)-.325 G 1.661(ls of precision for non-inte).195 F 1.661
(ger arithmetic types: \215oat,)-.195 F 1.471(double and long double.)
33.336 609 R(Ag)7.971 E 1.471
(ain, the choice of representation and the e)-.065 F 1.471
(xact precision is)-.195 F 6.142(implementation-speci\214c. In)33.336
624 R 2.893(most cases, IEEE-754 \215oating point format is used, and)
6.142 F .523(\215oats are 32 bits long, doubles are 64 bits, and long d\
oubles may be 80 or 128 bits \(long)33.336 639 R 1.076(double w)33.336
654 R 1.076(as added in C99 and is not al)-.13 F -.13(wa)-.13 G 1.076
(ys supported on older systems\).).13 F 1.077(C99 comple)7.577 F(x)-.195
E 1.009(types lik)33.336 669 R -.325(ew)-.13 G 1.009(ise can ha).325 F
1.399 -.195(ve \215)-.26 H 1.008
(oat, double or long double precision, and are in f).195 F 1.008
(act internally)-.13 F
(handled as a struct with a real and imaginary component.)33.336 684 Q
.299(While the types of v)33.336 705 R .299(ariables are e)-.325 F .299
(xplicitly declared, the compiler needs to kno)-.195 F 3.549(wt)-.325 G
.299(he types)-3.549 F .616(of constants.)33.336 720 R(The)7.116 E 3.866
(ym)-.195 G .616(ay be speci\214ed directly by the programmer using suf)
-3.866 F<8c78>-.325 E .616(es \(e.g. UL,)-.195 F 2.212
(LL\), or the type can be inferred by the v)33.336 735 R 2.213
(alue and kno)-.325 F 2.213(wledge of the ranges of v)-.325 F(alues)
-.325 E 0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 140.742(ECE466:Compilers Unit)33.336 60 R(3/pg 9)
2.25 E(\2512008 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25 E/F1 13
/Times-Roman@0 SF(representable in each type.)33.336 120 Q
(This is discussed further in the te)6.5 E(xts.)-.195 E(The)33.336 141 Q
/F2 13/Courier@0 SF(void)3.25 E F1(type is a special scalar type which \
is used to indicate the absence of a v)3.25 E(alue.)-.325 E 1.094
(This \214x)33.336 162 R 1.094
(ed set of arithmetic types suggests that, within the compiler)-.195 F
4.344(,as)-.52 G 1.093(ingle 8-bit w)-4.344 F(ord)-.13 E
(with bit \214elds could be used to represent them, or alternati)33.336
177 Q -.195(ve)-.325 G(ly a bit-\214eld struct.).195 E/F3 13
/Times-Bold@0 SF(Composite T)219.97 207 Q(ypes)-.962 E F1 .216(More com\
plicated types are created from the basic scalar types by applying poin\
ter)33.336 237 R 3.466(,a)-.52 G(rray)-3.466 E(or function declarators.)
33.336 252 Q F3 -.26(Po)244.358 282 S(inters).26 E F1 -.52(Wi)33.336 318
S 1.705(thin the compiler).52 F 4.955(,ap)-.52 G 1.705
(ointer type can be represented with an AST node indicating a)-4.955 F
(pointer)33.336 333 Q 3.811(,a)-.52 G .561
(nd then a pointer to the underlying type.)-3.811 F .562
(Pointers can also ha)7.062 F .952 -.195(ve a q)-.26 H(uali\214er).195 E
3.812(,e)-.52 G(.g.)-3.812 E F2 1.057(int * const ip;)33.336 348 R F1
1.056(declares a ponter which does not change, b)4.307 F 1.056
(ut which points to an)-.26 F(unquali\214ed in \(contrast w/)33.336 363
Q F2(const int *ip;)3.25 E F1(\).)A F3(Arrays)247.842 393 Q F1 .508
(An array type is slightly more complicated.)33.336 429 R .509
(The AST node must contain a pointer to the)7.009 F 2.167
(element type of the array \(the element type can not be a function, v)
33.336 444 R 2.166(oid, or a type of)-.26 F(unkno)33.336 459 Q 1.268(wn\
 size\), and there must be an indication of the array size \(number of \
elements\).)-.325 F 3.01(The size can be a speci\214c constant e)33.336
474 R 3.009(xpression kno)-.195 F 3.009
(wn at compile-time, or it can be)-.325 F(unkno)33.336 489 Q .856
(wn \(e.g. formal parameter to a function or referencing an e)-.325 F
.856(xtern array\).)-.195 F .856(C99 adds)7.356 F(comple)33.336 504 Q
.713(xity by allo)-.195 F .713(wing for v)-.325 F .713
(ariable-length arrays.)-.325 F .712
(The size of the array is then tied to a)7.213 F 1.791
(potentially arbitrary e)33.336 519 R 1.792(xpression and is not kno)
-.195 F 1.792(wn at compile time.)-.325 F 1.792(The compiler must)8.292
F .905
(insert run-time phantom statements to compute the size of the array)
33.336 534 R 4.155(,a)-.845 G .905(llocate storage for)-4.155 F 3.072
(it, and perform proper pointer arithmetic.)33.336 549 R 3.072(C99 allo)
9.572 F 3.073(ws for quali\214ers within an array)-.325 F(declarator)
33.336 564 Q 4.777(,b)-.52 G 1.526(ut only when used in a function prot\
otype, in which case the array type is)-5.037 F(automatically con)33.336
579 Q -.195(ve)-.52 G(rted to a pointer type an).195 E(yw)-.195 E(ay)
-.13 E(.)-.845 E F3(Functions)239.886 609 Q F1 4.028(Af)33.336 645 S
.778(unction type needs a pointer to the return type \(functions may re\
turn an)-4.028 F 4.029(yt)-.195 G .779(ype e)-4.029 F(xcept)-.195 E
1.904("array of..." or "function..."\) and a list of pointers to the ty\
pes of the ar)33.336 660 R 5.154(guments. The)-.234 F .492(latter is th\
e prototype for the function, and is optional to retain compatibility w\
ith classic)33.336 675 R 3.25(C. Therefore,)33.336 690 R
(the declaration)3.25 E/F4 10/Courier@0 SF(int f\(\);)33.336 702 Q F1
2.275(declares that f is a function which returns int and tak)33.336 717
R 2.275(es an unspeci\214ed ar)-.13 F 2.275(gument list,)-.234 F(while)
33.336 732 Q 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 10)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(int f\(void\);)33.336 117 Q/F2 13/Times-Roman@0 SF 3.576
(declares f speci\214cally as taking no ar)33.336 132 R 6.826
(guments. The)-.234 F 3.576(compiler must also handle the)6.826 F .7
(presence of the v)33.336 147 R .7(ariable ar)-.325 F .7
(gument list speci\214er)-.234 F/F3 13/Courier@0 SF(...)3.949 E F2 .699
(which may appear at the end of the)7.199 F(ar)33.336 162 Q
(gument list only)-.234 E(.)-.845 E/F4 13/Times-Bold@0 SF(Structur)
206.054 192 Q(es and unions)-.234 E F2 1.532(Structures and unions ha)
33.336 228 R 1.922 -.195(ve t)-.26 H 1.792 -.13(wo a).195 H 4.782
(spects. A).13 F/F5 13/Times-Italic@0 SF(de\214nition)4.782 E F2 1.532
(of a ne)4.782 F 4.782(ws)-.325 G 1.533(truct or union lists the)-4.782
F 1.807(members, and is similar to a list of v)33.336 243 R 1.807
(ariable declarations which might appear within a)-.325 F 4.984
(block. Each)33.336 258 R 1.734(de\214nition introduces a ne)4.984 F
3.424 -.845(w, d)-.325 H 1.734(istinct type.).845 F 1.734
(Once de\214ned, that type can be)8.234 F F5 -.481(re)33.336 273 S(fer)
.481 E(enced)-.481 E F2 2.745(to create v)5.995 F 2.745
(ariables of struct or union type, pointers to such, abstract type)-.325
F 1.598(names, etc.)33.336 288 R 1.598(There are tw)8.098 F 4.848(om)
-.13 G 1.598(echanisms for doing this: either saying the reserv)-4.848 F
1.598(ed w)-.195 F(ord)-.13 E F3(struct)33.336 303 Q F2(\(or)3.383 E F3
(union)3.383 E F2 3.383(\)f)C(ollo)-3.383 E .133
(wed by the tag, or by using a typedef alias.)-.325 F .132
(These methods are)6.632 F(equi)33.336 318 Q -.325(va)-.325 G 4.513
(lent. Struct/union).325 F 1.264
(de\214nitions can appear within a declaration, abstract type name)4.513
F .003(or cast, and need not ha)33.336 333 R .393 -.195(ve a t)-.26 H
3.253(ag. Ho).195 F(we)-.325 E -.195(ve)-.325 G 1.043 -.52(r, i).195 H
3.253(ft).52 G .003(he de\214nition has no tag and is not someho)-3.253
F(w)-.325 E(captured with a typedef, there is no w)33.336 348 Q
(ay to get back at it later)-.13 E(.)-.715 E 2.865(So, when the compile\
r encounters a struct or union de\214nition, it must create a ne)33.336
369 R(w)-.325 E .38(symbol table/scope for the members.)33.336 384 R .38
(The scope will be e)6.88 F .379(xited at the closing brace of the)-.195
F 3.22(struct/union de\214nition, b)33.336 399 R 3.22
(ut the underlying symbol table will not be destro)-.26 F 9.721
(yed. The)-.13 F 1.538(internal representation of a struct/union type i\
ncludes this symbol table, and also some)33.336 414 R 1.133(helpful inf\
ormation such as the size of the struct/union and a pointer back to the\
 tag \(if)33.336 429 R(an)33.336 444 Q(y\) which de\214nes it.)-.195 E
3.329(struct or union de\214nitions can be incomplete, i.e. there is no\
 member list.)33.336 465 R 3.328(This is)9.829 F
(necessary for self-referential structures, e.g.:)33.336 480 Q F1 12({/)
33.336 492 S 6(/d)-12 G(ef of structs rooted in this scope)-6 E
(struct leaf;)90.936 504 Q(struct node;)90.936 516 Q(struct node {)
90.936 540 Q(struct leaf *leaf;)148.536 552 Q(struct node *node;)148.536
564 Q(struct foo {)148.536 576 Q(int a;)206.136 588 Q 6(}b)148.536 600 S
(ar;)-6 E(};)90.936 612 Q(struct leaf {)90.936 636 Q(struct node *node;)
148.536 648 Q(struct leaf *leaf;)148.536 660 Q(struct leaf myself;)
148.536 672 Q(// NOT VALID, INCOMPLETE TYPE)1.2 E(};)90.936 684 Q
(struct foo f1;)90.936 708 Q(// struct foo defined above)146.4 E(})
33.336 720 Q F2 4.979(Incomplete struct/union types are a form of forw)
33.336 741 R 4.979(ard declaration, i.e.)-.13 F 4.979(use before)11.479
F 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 11)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 7.432(de\214nition. The)33.336 120 R 7.432(yc)-.195
G 4.182(an be used in an)-7.432 F 7.431(ys)-.195 G 4.181
(ituation where it is not necessary to kno)-7.431 F(w)-.325 E/F2 13
/Courier@0 SF(sizeof\(type\))33.336 135 Q F1 6.568(.E)C .068
(.g. one can al)-6.568 F -.13(wa)-.13 G .068
(ys declare a pointer to an incomplete struct type, b).13 F(ut)-.26 E
1.389(it is ne)33.336 150 R -.195(ve)-.325 G 4.639(rv).195 G 1.388(alid\
 to declare an instance of the struct itself when that type is incomple\
te.)-4.964 F(Nor w)33.336 165 Q
(ould an array of incomplete structs be v)-.13 E(alid.)-.325 E .792
(The syntax sho)33.336 186 R .792(wn abo)-.325 F -.195(ve)-.195 G 4.042
(,w).195 G .792(ith a struct tag and nothing else, e.g.)-4.042 F F2 .792
(struct leaf;)7.292 F F1 4.043(,i)C 4.043(sa)-4.043 G 1.394
(special construction.)33.336 201 R 1.394
(It tells the compiler to hide an)7.894 F 4.644(yp)-.195 G(re-e)-4.644 E
1.394(xisting de\214nition of that tag)-.195 F 4.227(\(i.e. if)33.336
216 R F2 .977(struct leaf)4.227 F F1(or)4.228 E F2 .978(struct node)
4.228 F F1 .978(were visible outside of the outermost set of)4.228 F
.133(braces\) and start a ne)33.336 231 R 1.823 -.845(w, i)-.325 H .133
(ncomplete de\214nition.).845 F .133(This construction does not w)6.633
F .133(ork for enum.)-.13 F 1.473(The de\214nition of a struct or union\
 is considered complete after the closing brace of its)33.336 252 R 1.04
(member list.)33.336 267 R 1.04(Therefore, the member)7.54 F F2(myself)
4.29 E F1(abo)4.29 E 1.43 -.195(ve i)-.195 H 4.29(sn).195 G 1.04(ot v)
-4.29 F 1.04(alid, because the de\214nition)-.325 F(of)33.336 282 Q F2
2.154(struct leaf)5.404 F F1 2.154(is not yet complete.)5.404 F 2.155
(The compiler must be able to determine the)8.654 F 2.279
(sizeof each member)33.336 297 R 5.529(,b)-.52 G 2.278
(ecause it must allocate of)-5.529 F 5.528(fsets. V)-.325 F 2.278
(ariable-size arrays can not be)-1.443 F 1.111(structure members.)33.336
312 R 1.111(C99 allo)7.611 F 1.111
(ws for one array of unspeci\214ed \([], not v)-.325 F 1.112
(ariable\) size to be)-.325 F .713(the last member of a structure.)
33.336 327 R .713(This le)7.213 F .713
(gitimizes a long-standing C programming trick of)-.195 F .42
(creating v)33.336 342 R .421(ariably sized structs which ha)-.325 F
.811 -.195(ve a b)-.26 H(uf)-.065 E .421(fer at the end.)-.325 F .421
(Refer to the te)6.921 F .421(xts for more)-.195 F(information.)33.336
357 Q 1.491(Members of structs and unions can')33.336 378 R 4.741(th)
-.234 G -2.925 -.26(av e)-4.741 H 1.491(storage classes, b)5.001 F 1.491
(ut the)-.26 F 4.741(yc)-.195 G 1.491(an ha)-4.741 F 1.881 -.195(ve q)
-.26 H(uali\214ers.).195 E 2.561(typedef declarations are not allo)
33.336 393 R 2.561(wed within struct or union de\214nitions.)-.325 F
2.561(Although the)9.061 F 4.171(member declarations are in a pri)33.336
408 R -.325(va)-.325 G 4.171(te scope, an).325 F 7.421(ye)-.195 G 4.171
(mbedded struct, union or enum)-7.421 F 4.17(de\214nitions are placed i\
n the enclosing function, block or \214le scope.)33.336 423 R 4.17
(This is true)10.67 F(re)33.336 438 Q -.065(ga)-.195 G 2.307
(rdless of ho).065 F 5.557(wd)-.325 G 2.307
(eeply nested these de\214nitions are.)-5.557 F 2.306
(If this were not the case, the)8.807 F(y)-.195 E -.13(wo)33.336 453 S
.5(uld not be visible outside of the member list, and w).13 F .501
(ould be f)-.13 F .501(airly useless.)-.13 F .501(Note in the)7.001 F
-.195(ex)33.336 468 S .914(ample abo).195 F 1.304 -.195(ve t)-.195 H
.914(he de\214nition of).195 F F2 .914(struct foo)4.164 F F1 7.413(.T)C
.913(hese pecularities require the compiler)-7.413 F
(to be careful about the nesting of scopes.)33.336 483 Q/F3 13
/Times-Bold@0 SF(AST type r)199.326 513 Q(epr)-.234 E(esentation)-.234 E
F1(Belo)33.336 549 Q 3.25(wi)-.325 G 3.25(sap)-3.25 G
(ossible AST representation of the follo)-3.25 E(wing code)-.325 E/F4 10
/Courier@0 SF(struct s1 {)33.336 561 Q(int z;)90.936 573 Q(};)33.336 585
Q(struct s1)33.336 609 Q 6(*\()12 G(*p[10]\)\(int, double\);)-6 E 0 Cg
EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 12)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E 0 0
415 415 -447 447 59.836 567 PBEGIN
%%BeginDocument: typesast.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: typesast.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Thu Oct 16 22:24:07 2008
%%For: hak@lex ()
%%BoundingBox: 0 0 415 447
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 447 moveto 0 0 lineto 415 0 lineto 415 447 lineto closepath clip newpath
-202.5 441.7 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
7.500 slw
n 7200 1725 m 7350 1725 l 7350 2925 l 7200 2925 l
 cp gs col0 s gr 
% Polyline
n 7200 1725 m 7350 1725 l 7350 1875 l 7200 1875 l
 cp gs col0 s gr 
% Polyline
n 7200 2025 m 7350 2025 l 7350 2175 l 7200 2175 l
 cp gs col0 s gr 
% Polyline
n 7200 2325 m 7350 2325 l 7350 2475 l 7200 2475 l
 cp gs col0 s gr 
% Polyline
n 7200 2625 m 7350 2625 l 7350 2775 l 7200 2775 l
 cp gs col0 s gr 
% Polyline
n 6825 1050 m 7650 1050 l 7650 1575 l 6825 1575 l
 cp gs col0 s gr 
% Polyline
n 4125 825 m 4275 825 l 4275 2025 l 4125 2025 l
 cp gs col0 s gr 
% Polyline
n 4125 825 m 4275 825 l 4275 975 l 4125 975 l
 cp gs col0 s gr 
% Polyline
n 4125 1125 m 4275 1125 l 4275 1275 l 4125 1275 l
 cp gs col0 s gr 
% Polyline
n 4125 1425 m 4275 1425 l 4275 1575 l 4125 1575 l
 cp gs col0 s gr 
% Polyline
n 4125 1725 m 4275 1725 l 4275 1875 l 4125 1875 l
 cp gs col0 s gr 
% Polyline
n 8325 5625 m 8475 5625 l 8475 6825 l 8325 6825 l
 cp gs col0 s gr 
% Polyline
n 8325 5625 m 8475 5625 l 8475 5775 l 8325 5775 l
 cp gs col0 s gr 
% Polyline
n 8325 5925 m 8475 5925 l 8475 6075 l 8325 6075 l
 cp gs col0 s gr 
% Polyline
n 8325 6225 m 8475 6225 l 8475 6375 l 8325 6375 l
 cp gs col0 s gr 
% Polyline
n 8325 6525 m 8475 6525 l 8475 6675 l 8325 6675 l
 cp gs col0 s gr 
% Polyline
gs  clippath
5340 930 m 5340 870 l 5188 870 l 5308 900 l 5188 930 l cp
eoclip
n 4200 900 m
 5325 900 l gs col0 s gr gr

% arrowhead
n 5188 930 m 5308 900 l 5188 870 l  col0 s
% Polyline
n 5325 750 m 6225 750 l 6225 1500 l 5325 1500 l
 cp gs col0 s gr 
% Polyline
gs  clippath
6840 1305 m 6840 1245 l 6688 1245 l 6808 1275 l 6688 1305 l cp
eoclip
n 5850 1275 m
 6825 1275 l gs col0 s gr gr

% arrowhead
n 6688 1305 m 6808 1275 l 6688 1245 l  col0 s
% Polyline
n 8250 1725 m 9150 1725 l 9150 2475 l 8250 2475 l
 cp gs col0 s gr 
% Polyline
n 9150 3075 m 10050 3075 l 10050 3825 l 9150 3825 l
 cp gs col0 s gr 
% Polyline
gs  clippath
9510 3105 m 9557 3067 l 9463 2949 l 9515 3062 l 9416 2987 l cp
eoclip
n 8925 2325 m
 9525 3075 l gs col0 s gr gr

% arrowhead
n 9416 2987 m 9515 3062 l 9463 2949 l  col0 s
% Polyline
gs  clippath
8265 1830 m 8265 1770 l 8113 1770 l 8233 1800 l 8113 1830 l cp
eoclip
n 7275 1800 m
 8250 1800 l gs col0 s gr gr

% arrowhead
n 8113 1830 m 8233 1800 l 8113 1770 l  col0 s
% Polyline
gs  clippath
4625 3322 m 4683 3305 l 4639 3160 l 4645 3284 l 4581 3177 l cp
eoclip
n 4200 1800 m
 4650 3300 l gs col0 s gr gr

% arrowhead
n 4581 3177 m 4645 3284 l 4639 3160 l  col0 s
% Polyline
n 4650 3300 m 5550 3300 l 5550 4050 l 4650 4050 l
 cp gs col0 s gr 
% Polyline
n 5400 4725 m 6300 4725 l 6300 5475 l 5400 5475 l
 cp gs col0 s gr 
% Polyline
n 6675 4725 m 7575 4725 l 7575 5475 l 6675 5475 l
 cp gs col0 s gr 
% Polyline
gs  clippath
6703 4818 m 6672 4766 l 6542 4842 l 6661 4808 l 6572 4894 l cp
eoclip
n 5775 5325 m
 6675 4800 l gs col0 s gr gr

% arrowhead
n 6572 4894 m 6661 4808 l 6542 4842 l  col0 s
% Polyline
n 8025 4725 m 8925 4725 l 8925 5475 l 8025 5475 l
 cp gs col0 s gr 
% Polyline
n 9375 4725 m 10275 4725 l 10275 5475 l 9375 5475 l
 cp gs col0 s gr 
% Polyline
gs  clippath
5574 1552 m 5517 1568 l 5559 1714 l 5555 1591 l 5616 1698 l cp
eoclip
n 9975 5175 m 5850 2625 l
 5550 1575 l gs col0 s gr gr

% arrowhead
n 5616 1698 m 5555 1591 l 5559 1714 l  col0 s
% Polyline
gs  clippath
9397 4974 m 9381 4917 l 9235 4956 l 9359 4954 l 9251 5014 l cp
eoclip
n 8550 5175 m
 9375 4950 l gs col0 s gr gr

% arrowhead
n 9251 5014 m 9359 4954 l 9235 4956 l  col0 s
% Polyline
gs  clippath
7977 4819 m 7948 4766 l 7815 4839 l 7935 4808 l 7844 4891 l cp
eoclip
n 7125 5250 m
 7950 4800 l gs col0 s gr gr

% arrowhead
n 7844 4891 m 7935 4808 l 7815 4839 l  col0 s
% Polyline
n 3750 150 m 4575 150 l 4575 675 l 3750 675 l
 cp gs col0 s gr 
% Polyline
gs  clippath
8292 5708 m 8351 5720 l 8380 5572 l 8328 5684 l 8322 5560 l cp
eoclip
n 8400 5325 m
 8325 5700 l gs col0 s gr gr

% arrowhead
n 8322 5560 m 8328 5684 l 8380 5572 l  col0 s
% Polyline
n 9375 5625 m 10275 5625 l 10275 6375 l 9375 6375 l
 cp gs col0 s gr 
% Polyline
n 9375 6600 m 10275 6600 l 10275 7350 l 9375 7350 l
 cp gs col0 s gr 
% Polyline
gs  clippath
9390 5730 m 9390 5670 l 9238 5670 l 9358 5700 l 9238 5730 l cp
eoclip
n 8400 5700 m
 9375 5700 l gs col0 s gr gr

% arrowhead
n 9238 5730 m 9358 5700 l 9238 5670 l  col0 s
% Polyline
gs  clippath
9367 6707 m 9405 6661 l 9289 6563 l 9362 6664 l 9251 6609 l cp
eoclip
n 8400 5850 m
 9375 6675 l gs col0 s gr gr

% arrowhead
n 9251 6609 m 9362 6664 l 9289 6563 l  col0 s
% Polyline
gs  clippath
5455 4752 m 5508 4723 l 5435 4590 l 5467 4710 l 5383 4619 l cp
eoclip
n 5025 3900 m
 5475 4725 l gs col0 s gr gr

% arrowhead
n 5383 4619 m 5467 4710 l 5435 4590 l  col0 s
/Times-Roman ff 200.00 scf sf
5775 975 m
gs 1 -1 sc (STRUCT) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8700 1950 m
gs 1 -1 sc (MEMB) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5700 1200 m
gs 1 -1 sc ("s1") dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8625 2175 m
gs 1 -1 sc ("z") dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9600 3300 m
gs 1 -1 sc (SCALAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9525 3600 m
gs 1 -1 sc (int) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5100 3525 m
gs 1 -1 sc (VAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5100 3750 m
gs 1 -1 sc ("p") dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5775 4950 m
gs 1 -1 sc (ARRAY) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
5700 5175 m
gs 1 -1 sc (#=10) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7125 4950 m
gs 1 -1 sc (PTR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8325 4950 m
gs 1 -1 sc (FN) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9825 4950 m
gs 1 -1 sc (PTR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9825 5850 m
gs 1 -1 sc (SCALAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9825 6825 m
gs 1 -1 sc (SCALAR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9750 6225 m
gs 1 -1 sc (int) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9750 7125 m
gs 1 -1 sc (double) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Italic ff 200.00 scf sf
3375 75 m
gs 1 -1 sc (global scope) col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND/F1 13/Times-Roman@0 SF .161(One of the challenges in construct\
ing this representation is the nature of the C declaration)33.336 594 R
(syntax, which is "inside-out".)33.336 609 Q 3.25(ACd)6.5 G
(eclaration is of the form:)-3.25 E/F2 10/Courier@0 SF(declaration:)
33.336 621 Q 34.8(declaration_specifiers declarator)90.936 633 R(';')6 E
F1 3.157(The declaration_speci\214ers may contain simple type speci\214\
ers, such as)33.336 654 R/F3 13/Courier@0 SF(int)6.406 E F1 6.406(,t)C
(ypedef)-6.406 E 2.896(names, or struct/union/enum references \(possibl\
y with an embedded de\214nition\).)33.336 669 R(The)9.397 E .025
(speci\214ers may also be modi\214ed by quali\214ers \(e.g. const, v)
33.336 684 R .025(olatile, restrict\) or storage class.)-.26 F 1.076
(The declarator is a limited subset of the general C e)33.336 705 R
1.077(xpression syntax, in which the only)-.195 F 2.42(constructs are i\
denti\214ers, pointers, arrays, functions and parenthesized declarators\
.)33.336 720 R(In)8.919 E .785
(this syntax, the declaration of a function or v)33.336 735 R .786
(ariable mirrors the w)-.325 F .786(ay it w)-.13 F .786(ould be used in)
-.13 F 0 Cg EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 13)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(an e)33.336 120 Q(xpression.)-.195 E(Unfortunately)
33.336 141 Q 5.023(,t)-.845 G 1.773(he AST which w)-5.023 F 1.773
(ould be b)-.13 F 1.773(uilt "naturally" by e)-.26 F -.325(va)-.325 G
1.772(luating the declaration).325 F(comes out wrong:)33.336 156 Q 0 0
415 415 -499 499 59.836 676 PBEGIN
%%BeginDocument: astwrong.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: astwrong.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Thu Oct 16 22:32:26 2008
%%For: hak@lex ()
%%BoundingBox: 0 0 415 499
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 499 moveto 0 0 lineto 415 0 lineto 415 499 lineto closepath clip newpath
-238.0 494.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 4500 975 525 525 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 7050 975 525 525 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 4500 2625 525 525 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 7050 2625 525 525 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 7050 4205 525 525 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 7050 5925 525 525 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 7050 7505 525 525 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 9375 3225 525 525 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 8834 4677 525 525 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 10350 4677 525 525 0 360 DrawEllipse gs col0 s gr

% Polyline
gs  clippath
4694 436 m 4732 482 l 4849 385 l 4738 439 l 4810 339 l cp
eoclip
n 5175 75 m
 4725 450 l gs col0 s gr gr

% arrowhead
n 4810 339 m 4738 439 l 4849 385 l  col0 s
% Polyline
gs  clippath
6673 558 m 6702 506 l 6570 432 l 6661 517 l 6541 484 l cp
eoclip
n 6000 150 m
 6675 525 l gs col0 s gr gr

% arrowhead
n 6541 484 m 6661 517 l 6570 432 l  col0 s
% Polyline
gs  clippath
6193 6364 m 6235 6406 l 6343 6299 l 6237 6363 l 6300 6256 l cp
eoclip
n 6525 6075 m
 6225 6375 l gs col0 s gr gr

% arrowhead
n 6300 6256 m 6237 6363 l 6343 6299 l  col0 s
% Polyline
gs  clippath
6119 7935 m 6157 7982 l 6275 7888 l 6163 7940 l 6237 7841 l cp
eoclip
n 6525 7650 m
 6150 7950 l gs col0 s gr gr

% arrowhead
n 6237 7841 m 6163 7940 l 6275 7888 l  col0 s
% Polyline
gs  clippath
4470 2115 m 4530 2115 l 4530 1963 l 4500 2083 l 4470 1963 l cp
eoclip
n 4500 1425 m
 4500 2100 l gs col0 s gr gr

% arrowhead
n 4470 1963 m 4500 2083 l 4530 1963 l  col0 s
% Polyline
gs  clippath
6945 2115 m 7005 2115 l 7005 1963 l 6975 2083 l 6945 1963 l cp
eoclip
n 6975 1500 m
 6975 2100 l gs col0 s gr gr

% arrowhead
n 6945 1963 m 6975 2083 l 7005 1963 l  col0 s
% Polyline
gs  clippath
7020 3690 m 7080 3690 l 7080 3538 l 7050 3658 l 7020 3538 l cp
eoclip
n 7050 3150 m
 7050 3675 l gs col0 s gr gr

% arrowhead
n 7020 3538 m 7050 3658 l 7080 3538 l  col0 s
% Polyline
gs  clippath
6945 5415 m 7005 5415 l 7005 5263 l 6975 5383 l 6945 5263 l cp
eoclip
n 6975 4725 m
 6975 5400 l gs col0 s gr gr

% arrowhead
n 6945 5263 m 6975 5383 l 7005 5263 l  col0 s
% Polyline
gs  clippath
7020 7065 m 7080 7065 l 7080 6913 l 7050 7033 l 7020 6913 l cp
eoclip
n 7050 6450 m
 7050 7050 l gs col0 s gr gr

% arrowhead
n 7020 6913 m 7050 7033 l 7080 6913 l  col0 s
% Polyline
gs  clippath
8931 3107 m 8947 3050 l 8801 3009 l 8909 3071 l 8785 3067 l cp
eoclip
n 7575 2700 m
 8925 3075 l gs col0 s gr gr

% arrowhead
n 8785 3067 m 8909 3071 l 8801 3009 l  col0 s
% Polyline
gs  clippath
8816 4194 m 8865 4229 l 8954 4106 l 8860 4187 l 8905 4071 l cp
eoclip
n 9225 3675 m
 8850 4200 l gs col0 s gr gr

% arrowhead
n 8905 4071 m 8860 4187 l 8954 4106 l  col0 s
% Polyline
gs  clippath
10034 4305 m 10083 4269 l 9992 4147 l 10040 4262 l 9944 4183 l cp
eoclip
n 9600 3675 m
 10050 4275 l gs col0 s gr gr

% arrowhead
n 9944 4183 m 10040 4262 l 9992 4147 l  col0 s
/Times-Roman ff 200.00 scf sf
5550 75 m
gs 1 -1 sc (declaration) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4500 975 m
gs 1 -1 sc (STRUCT) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4500 1200 m
gs 1 -1 sc (REF) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
4500 2625 m
gs 1 -1 sc (z) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6975 975 m
gs 1 -1 sc (PTR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6975 2625 m
gs 1 -1 sc (FN) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6975 4200 m
gs 1 -1 sc (PTR) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6975 5925 m
gs 1 -1 sc (ARY) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6075 6675 m
gs 1 -1 sc (10) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
7050 7500 m
gs 1 -1 sc (IDENT) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
6000 8175 m
gs 1 -1 sc ("p") dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
9300 3225 m
gs 1 -1 sc (plist) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
8775 4725 m
gs 1 -1 sc (int) dup sw pop 2 div neg 0 rm  col0 sh gr
/Times-Roman ff 200.00 scf sf
10275 4725 m
gs 1 -1 sc (double) dup sw pop 2 div neg 0 rm  col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
%%EndDocument
end PEND .785(There are classically a number of dif)33.336 703 R .785
(ferent approaches for rectifying this when writing a)-.325 F 4.29(Cc)
33.336 718 S(ompiler)-4.29 E 7.54(.O)-.715 G 1.04(ne method is to allo)
-7.54 F 4.29(wt)-.325 G 1.04(he AST to be b)-4.29 F 1.04(uilt "backw)
-.26 F 1.04(ards", and then mak)-.13 F 4.29(ea)-.13 G 1.434
(second pass to re)33.336 733 R -.195(ve)-.325 G 1.434(rse it.).195 F
1.434(Another method is to use, as the semantic v)7.934 F 1.434
(alue of the rules)-.325 F 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 14)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(in)33.336 120 Q -.26(vo)-.52 G(lv).26 E .543(ed in \
a declaration, a pair of AST node pointers, one of which tracks the "de\
epest")-.195 F 1.812(node, the other which tracks the "top" frontier)
33.336 135 R 5.063(,a)-.52 G 1.813
(nd use these pointers to construct the)-5.063 F(AST the correct w)
33.336 150 Q(ay)-.13 E 6.5(.T)-.845 G(his is not an e)-6.5 E(xhausti)
-.195 E .39 -.195(ve l)-.325 H(ist of approaches.).195 E/F2 13
/Times-Bold@0 SF(Enum types)234.29 180 Q F1 .495(enum types are equi)
33.336 216 R -.325(va)-.325 G .495(lent to ints in C.).325 F .495
(It is ne)6.995 F -.195(ve)-.325 G 3.745(ra).195 G 3.745(ne)-3.745 G
.494(rror to assign an int to an enum or)-3.745 F 2.061(vice v)33.336
231 R 2.061(ersa, and no range checking is required.)-.195 F(Lik)8.561 E
5.311(es)-.13 G 2.061(tructures and unions, enums are)-5.311 F .656(de\
\214ned once, possibly with an associated tag, and can be used later wi\
th a typedef name)33.336 246 R .73(or the w)33.336 261 R(ord)-.13 E/F3
13/Courier@0 SF(enum)3.98 E F1(follo)3.981 E .731(wed by the tag.)-.325
F(Unlik)7.231 E 3.981(es)-.13 G .731
(tructures or unions, the identi\214ers listed)-3.981 F .069
(within the enum de\214nition are not in an independent scope, b)33.336
276 R .068(ut instead get placed into the)-.26 F 2.235
(symbol table currently in scope.)33.336 291 R 2.235
(enum constant names are in "e)8.735 F -.195(ve)-.325 G 2.235
(rything else" name).195 F .726(space and must be unique from v)33.336
306 R .725(ariable, function and typedef names visible in the same)-.325
F 5.522(scope. The)33.336 321 R 2.272(only moderately trick)5.522 F
5.522(yt)-.195 G 2.272(hing for the compiler is to k)-5.522 F 2.273
(eep track, during an)-.13 F .167(enum de\214nition, of the last inte)
33.336 336 R .167(ger v)-.195 F .167
(alue associated with the last constant name, so v)-.325 F(alues)-.325 E
(can automatically be assigned if not speci\214ed.)33.336 351 Q F2 -.962
(Ty)224.657 381 S(pe Quali\214ers).962 E F1 1.486(ANSI C introduced tw)
33.336 417 R 4.736(oq)-.13 G 1.487
(uali\214ers which can be applied to an)-4.736 F 4.737(yt)-.195 G 1.487
(ype e)-4.737 F 1.487(xcept function or)-.195 F 2.205(array \(C99 allo)
33.336 432 R 2.205(ws arrays to be quali\214ed b)-.325 F 2.204
(ut only when the)-.26 F 5.454(ya)-.195 G 2.204
(re a formal parameter\).)-5.454 F(The)33.336 447 Q 5.855(ya)-.195 G(re)
-5.855 E F3(const)5.855 E F1(and)5.855 E F3(volatile)5.855 E F1 9.105
(.T)C 2.606(hese quali\214ers must be "carried around" by the)-9.105 F
(compiler)33.336 462 Q 7.868(.C)-.715 G 1.368(99 added a ne)-7.868 F
4.618(wq)-.325 G(uali\214er)-4.618 E F3(restrict)4.618 E F1 1.368
(which can only be applied to pointer)4.618 F 5.069(types. Quali\214ers)
33.336 477 R 1.819(do not change the actual representation of a type, b)
5.069 F 1.819(ut the)-.26 F 5.069(yd)-.195 G 5.07(oc)-5.069 G(reate)
-5.07 E .039(compile-time restrictions on ho)33.336 492 R 3.289(wat)
-.325 G .039(ype can be used, and pro)-3.289 F .039
(vide hints to the compiler for)-.195 F(optimization.)33.336 507 Q F2
(Br)156.608 567 Q(eaking the Lexer Abstraction Barrier)-.234 E F1 .979
(In a perfect w)33.336 603 R .979(orld, the le)-.13 F .98
(xical analyzer w)-.195 F .98
(ould stand alone, feeding a sequence of tok)-.13 F(ens)-.13 E 1.268
(as demanded to the parser)33.336 618 R 7.768(.H)-.715 G -.325(ow)-7.768
G -2.795 -.325(ev e).325 H 2.308 -.52(r, i).325 H 4.518(na).52 G 1.658
-.195(ny l)-4.518 H 1.268(anguage, there are often constructs which).195
F(are dif)33.336 633 Q
(\214cult to parse while adhering strictly to this model.)-.325 E
(Consider:)9.75 E/F4 10/Courier@0 SF(typedef int itd;)33.336 645 Q
(/*...*/)33.336 657 Q(f\(\))33.336 669 Q({)33.336 681 Q(itd \(x\);)
90.936 693 Q(})33.336 705 Q F1 4.405(Ah)33.336 720 S 1.155
(uman reading this code w)-4.405 F 1.155(ould hopefully recognize that)
-.13 F F3(itd)4.405 E F1 1.155(is a typedef name, and)4.405 F 1.585(the\
refore the line of code within the function f is a declaration of a v)
33.336 735 R(ariable)-.325 E F3(x)4.834 E F1 1.584(as type)4.834 F 0 Cg
EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 15)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Courier@0 SF(int)33.336 120 Q/F2 13/Times-Roman@0 SF 10.026(.\()C
3.526(the parentheses are redundant b)-10.026 F 3.527(ut are in this e)
-.26 F 3.527(xample to force the issue of)-.195 F 3.757(ambiguity!\) Ho)
33.336 135 R(we)-.325 E -.195(ve)-.325 G 1.546 -.52(r, i).195 H 3.756
(ft).52 G .506(he le)-3.756 F -.195(xe)-.195 G 3.756(rs).195 G .506
(imply returns IDENT as the tok)-3.756 F .506(en class for)-.13 F F1
(itd)3.756 E F2 3.756(,t)C(his)-3.756 E 2.624
(syntax is indistinguishable from a function call.)33.336 150 R 2.624
(In other w)9.124 F 2.624(ords, the grammar is not)-.13 F(conte)33.336
165 Q 4.03(xt-free, and since after the opening brace either a declarat\
ion or a statement)-.195 F 1.538(consisting of a function call e)33.336
180 R 1.538(xpression are both v)-.195 F 1.538(alid, we w)-.325 F 1.538
(ould ha)-.13 F 1.928 -.195(ve a r)-.26 H(educe-reduce).195 E
(con\215ict here.)33.336 195 Q 3.481
(One classic approach to handling this is to ha)33.336 216 R 3.87 -.195
(ve t)-.26 H 3.48(he le).195 F -.195(xe)-.195 G 4.52 -.52(r, r).195 H
3.48(ather than just blindly).52 F .818(returning IDENT)33.336 231 R
4.068(,c)-.962 G .818(onsult the symbol table.)-4.068 F .818
(If the identi\214er in question is in the symbol)7.318 F 1.302
(table and is a typedef name, the le)33.336 246 R -.195(xe)-.195 G 4.552
(rr).195 G 1.302(eturns a dif)-4.552 F 1.302(ferent tok)-.325 F 1.302
(en, e.g.)-.13 F(TYPEDEFN)7.802 E(AME.)-.455 E 1.661(This resolv)33.336
261 R 1.661(es the ambiguity abo)-.195 F -.195(ve)-.195 G 8.161(.U).195
G(nfortunately)-8.161 E 4.911(,t)-.845 G 1.662(here are additional dif)
-4.911 F 1.662(\214culties with)-.325 F 3.19(the typedef mechnanism \(w\
hich is treated with caution by old-time C programmers)33.336 276 R
(because of the man)33.336 291 Q 3.25(yc)-.195 G
(ompilers which did not implement it correctly!\))-3.25 E
(Consider this e)33.336 312 Q(xample:)-.195 E/F3 10/Courier@0 SF
(typedef int itd;)33.336 324 Q(f1\(\))33.336 348 Q({)33.336 360 Q
(itd *itd;)39.336 372 Q(})33.336 384 Q F2 3.086(Upon entry to the block\
 scope attached to function f1, itd is a typedef name.)33.336 405 R(The)
9.587 E 1.651(declaration then creates a ne)33.336 420 R 4.901(ws)-.325
G 1.651(ymbol itd, which is a v)-4.901 F 1.651
(ariable name, within that block)-.325 F 5.347(scope. This)33.336 435 R
2.097
(de\214nition hides the use of itd as a typedef name within that block.)
5.347 F(One)8.598 E 1.052(might think that we can still w)33.336 450 R
1.052(ork this out: after seeing a TYPEDEFN)-.13 F 1.052
(AME, pass a \215ag)-.455 F .108(back to the le)33.336 465 R -.195(xe)
-.195 G 3.358(rt).195 G 3.358(os)-3.358 G .108
(top translating IDENT to TYPEDEFN)-3.358 F .109
(AME, and reset that \215ag at the)-.455 F 2.777
(end of the declaration \(semicolon\).)33.336 480 R 2.777(This approach)
9.277 F/F4 13/Times-Italic@0 SF(almost)6.027 E F2 -.13(wo)6.026 G 2.776
(rks, b).13 F 2.776(ut when ANSI C)-.26 F
(introduced function prototypes, things rapidly got ugly:)33.336 495 Q
F3(typedef int itd;)33.336 507 Q(f2\(\))33.336 531 Q({)33.336 543 Q
(itd itd\(itd ij, itd itd\);)39.336 555 Q(})33.336 567 Q F2 .366(This m\
ess declares itd to be, within the scope of f2, the name of a function \
which returns)33.336 588 R .229(int and tak)33.336 603 R .229(es tw)-.13
F 3.479(oi)-.13 G .229(nt ar)-3.479 F .228(guments, which ha)-.234 F
.618 -.195(ve b)-.26 H .228(een gi).195 F -.195(ve)-.325 G 3.478(nt).195
G .228(he \(useless\) names ij and itd.)-3.478 F -1.04(To)6.728 G .683
(clarify this, let us add suf)33.336 618 R<8c78>-.325 E .684
(es to the ambiguous identi\214er sho)-.195 F .684
(wing the scope in which is)-.325 F(is being recognized and its class \
\(T for typedefname, I for identi\214er\).)33.336 633 Q F3
(//scope0==global)33.336 660 Q(typedef int itdT0;)33.336 672 Q(f2\(\))
33.336 696 Q({)33.336 708 Q(//scope1==function)33.336 720 Q
(//scope2==prototype)33.336 732 Q 0 Cg EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 16)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(itdT0 itdI1\(itdT0 ijI2, itdT0 itdI2\);)39.336 117 Q(})
33.336 129 Q/F2 13/Times-Roman@0 SF 3.7(Note that itdI1 must be recogni\
zed as an identi\214er which is being declared.)33.336 150 R(That)10.2 E
1.193(declaration will be rooted in scope 1, b)33.336 165 R 1.194
(ut the C standard says that a declaration doesn')-.26 F(t)-.234 E(tak)
33.336 180 Q 7.859(ee)-.13 G -.325(ff)-7.859 G 4.609
(ect until the end of the).325 F/F3 13/Times-Italic@0 SF(declar)7.859 E
(ator)-.195 E F2 4.609(in which that identi\214er is mentioned.)7.859 F
.4
(Therefore, as we enter the prototype scope, itdT1 is not yet visible.)
33.336 195 R .401(Then itdT0 gi)6.901 F -.195(ve)-.325 G 3.651(st).195 G
(he)-3.651 E 2.148(type of the \214rst prototype parameter)33.336 210 R
8.648(.i)-.715 G 2.147(tdI2 declares itd to be the name of the second)
-8.648 F 1.144(formal parameter)33.336 225 R 4.394(,w)-.52 G 1.144
(hich will obscure the itdT0 declaration.)-4.394 F 1.144
(Note that if we re)7.644 F -.195(ve)-.325 G 1.144(rse the).195 F
(order of the prototype parameter list, we get in trouble:)33.336 240 Q
F1(itdT0 itdI1\(itdT0 itdI2,itdI2 ijI2\);)39.336 252 Q F2 .3(because th\
e declaration of itdI2 as the \214rst parameter name obscures itdT0, an\
d this tak)33.336 267 R(es)-.13 E(ef)33.336 282 Q 1.159(fect when the c\
omma is seen, as that ends the declarator in which itdI2 is mentioned.)
-.325 F 3.045(Then the second parameter declaration is in)33.336 297 R
-.325(va)-.52 G 3.045(lid because itd is not recognized as a).325 F
(typedef name.)33.336 312 Q 1.181(If we turn OFF the IDENT)33.336 333 R
(->TYPEDEFN)-1.196 E 1.181(AME transformation in the le)-.455 F -.195
(xe)-.195 G 4.431(ra).195 G 4.431(ss)-4.431 G 1.181(oon as it)-4.431 F
.449(performs an instance of this transformation, we must turn it back \
on ag)33.336 348 R .448(ain upon reaching)-.065 F .377
(the end of a declarator)33.336 363 R 3.628(,o)-.52 G 3.628(rt)-3.628 G
.378(he opening parenthesis of the parameter type list of a function)
-3.628 F(declarator)33.336 378 Q(.)-.715 E(Ev)33.336 399 Q 1.938
(en this approach is not 100% foolproof.)-.195 F 1.938
(The C standard discusses cases which are)8.438 F 4.282
(truly ambiguous and gi)33.336 414 R -.195(ve)-.325 G 7.532(sa).195 G
7.532(na)-7.532 G 4.282(rbitrary w)-7.532 F 4.283
(ay of resolving the ambiguity)-.13 F 10.783(.T)-.845 G 4.283(he gcc)
-10.783 F(compiler)33.336 429 Q 6.487(,i)-.52 G 6.487(no)-6.487 G 3.237
(rder to comply with this, actually has to resort to splitting the enti\
re)-6.487 F 3.16(declaration grammar into tw)33.336 444 R 6.41(op)-.13 G
3.161(artitions, one in which IDENT)-6.41 F(->TYPEDEFN)-1.196 E 3.161
(AME is)-.455 F -.325(va)33.336 459 S(lid, and one in which it is not.)
.325 E(Consider this e)6.5 E(xample which uses abstract type names:)
-.195 E F1(f4\(\))33.336 471 Q({)33.336 483 Q(itd ff\(itd \(itd\)\);)
90.936 495 Q(})33.336 507 Q F2 .505(Here f)33.336 522 R 3.755(fi)-.325 G
3.755(sb)-3.755 G .505(eing declared as a function.)-3.755 F .505
(The return type of f)7.005 F 3.754(fi)-.325 G 3.754(si)-3.754 G 3.754
(nt. The)-3.754 F(ar)3.754 E .504(gument which)-.234 F 2.69 -.325(ff t)
33.336 537 T(ak).325 E 2.04(es is another function which tak)-.13 F 2.04
(es and returns an int.)-.13 F 2.04(But there is ambiguity: it)8.54 F
1.592(could also be that f)33.336 552 R 4.842(ft)-.325 G(ak)-4.842 E
1.592(es one inte)-.13 F 1.592(ger ar)-.195 F 1.592(gument which we gi)
-.234 F 1.982 -.195(ve t)-.325 H 1.592(he \(useless\) name itd.).195 F
1.208(Section 6.7.5.3 of the C standard, item #11, states that if in a \
parameter declaration the)33.336 567 R .436(identi\214er could be eithe\
r a typedef name or a parameter name, it must be recognized as a)33.336
582 R(typedef name, so the \214rst interpretation is correct.)33.336 597
Q(But w)33.336 618 Q(ait, there')-.13 E 3.25(sm)-.715 G(ore!)-3.25 E F1
(typedef int t;)33.336 630 Q(struct s {)33.336 654 Q(unsigned t:4;)
90.936 666 Q(//bit field named t)94.8 E(const t:5;)90.936 678 Q
(//unnamed bit field of type t)112.8 E(};)33.336 690 Q F2 -.52(Wi)33.336
711 S .602(thin the structure de\214nition abo).52 F -.195(ve)-.195 G
3.852(,w).195 G .602
(hich uses the bit \214eld syntax, the \214rst occurrence)-3.852 F .236
(of the identi\214er t declares a structure member named t.)33.336 726 R
.235(But in the ne)6.735 F .235(xt line, t is a typedef)-.195 F 1.99
(name, which is quali\214ed by const, and the declarator is :5, an anon)
33.336 741 R 1.99(ymous bit \214eld of)-.195 F 0 Cg EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 17)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 1.329(width 5.)33.336 120 R 1.329(The \214rst insta\
nce of t does not obscure the typedef declaration t \(from global)7.829
F .038(scope\), because structure members are not in the same namespace\
 class as typedef names.)33.336 135 R -1.3(Ye)33.336 150 S(s, it')1.3 E
3.25(sc)-.715 G(ases lik)-3.25 E 3.25(et)-.13 G
(hese which can lead a compiler writer to insanity)-3.25 E(.)-.845 E/F2
13/Times-Bold@0 SF -.962(Ty)165.754 195 S(pe Compatibility and Con).962
E -.13(ve)-.52 G(rsions).13 E F1 .585(The C standard uses the term "com\
patible types" in a slightly confusing w)33.336 231 R(ay)-.13 E 7.085
(.T)-.845 G .845 -.13(wo t)-8.125 H(ypes).13 E .909
(are compatbile if the)33.336 246 R 4.159(ya)-.195 G .909
(re identical, or if the)-4.159 F 4.159(ya)-.195 G .909
(re "close enough" to be equi)-4.159 F -.325(va)-.325 G 4.16(lent. This)
.325 F .958(concept is used whene)33.336 261 R -.195(ve)-.325 G 4.208
(rt).195 G 1.218 -.13(wo t)-4.208 H .958(ypes interact with each other)
.13 F 4.208(,e)-.52 G .958(.g. in assignment.)-4.208 F(When)10.708 E(tw)
33.336 276 Q 3.989(on)-.13 G .739
(on-identical types are compatible, the result is a)-3.989 F/F3 13
/Times-Italic@0 SF .739(composite type)3.989 F F1 .739
(which represents a)3.989 F 1.888(compromise, of sorts, between the tw)
33.336 291 R 5.137(ot)-.13 G 5.137(ypes. Determination)-5.137 F 1.887
(of type compatibility for)5.137 F
(complicated types can be performed recursi)33.336 306 Q -.195(ve)-.325
G(ly).195 E 3.25(,u)-.845 G(sing simple rules:)-3.25 E 1.307
(Arithmetic types are compatible only if the)33.336 327 R 4.557(ya)-.195
G 1.308(re the same type.)-4.557 F 1.308(long is not compatible)7.808 F
1.942(with short.)33.336 342 R 1.942
(signed int is not compatible with unsigned int.)8.442 F -1.04(Ty)8.442
G 1.942(pe quali\214ers also break)1.04 F
(compatibility: const int is not c/w int.)33.336 357 Q 2.245(Each enum \
de\214nition is a distinct type and is not compatible with other enum t\
ypes.)33.336 378 R(Ho)33.336 393 Q(we)-.325 E -.195(ve)-.325 G 4.637
-.52(r, a).195 H 3.987 -.195(ny e).52 H 3.596
(num type is compatible with int, and the result is that enum type.).195
F .618(Furthermore, since enums generally get con)33.336 408 R -.195(ve)
-.52 G .618(rted to ints in an).195 F 3.868(ye)-.195 G .618
(xpression, this is rarely)-4.063 F(an issue.)33.336 423 Q -1.3 -1.04
(Tw o)33.336 444 T 1.355(array types are compatible if their element ty\
pes are compatible, and if their sizes)5.645 F .869(are compatible too.)
33.336 459 R .869(The latter is de\214ned as follo)7.369 F .87
(ws: if both array types de\214ne a speci\214c)-.325 F 2.868(size, the)
33.336 474 R 6.118(ym)-.195 G 2.868(ust be equal.)-6.118 F(Ho)9.368 E
(we)-.325 E -.195(ve)-.325 G 3.908 -.52(r, i).195 H 6.118(fe).52 G 2.868
(ither or both sizes are not de\214ned, the)-6.118 F 6.117(ya)-.195 G
(re)-6.117 E 5.74(compatible. The)33.336 489 R 2.49(composite of the tw)
5.74 F 5.74(oa)-.13 G 2.491(rray types has an element type which is the)
-5.74 F .688(composite of the tw)33.336 504 R 3.938(oe)-.13 G .687
(lement types.)-3.938 F .687
(If either type de\214ned a size, the composite has that)7.187 F
(de\214ned size.)33.336 519 Q(In C99, the array types can be quali\214e\
d and if so the quali\214ers must match.)6.5 E -1.3 -1.04(Tw o)33.336
540 T 1.159(function types are compatible if their return types are com\
patible, and furthermore)5.449 F .085(their ar)33.336 555 R .085
(gument lists must be compatible.)-.234 F .084
(The latter introduces some complicated rules for)6.585 F 2.665(mixing \
prototype and non-prototype forms of function type speci\214ers.)33.336
570 R 2.665(The reader is)9.165 F 1.306(referred to the C standard.)
33.336 585 R 1.306
(If both function types are in prototype form, the number of)7.806 F(ar)
33.336 600 Q .055(guments must be equal, the use of v)-.234 F .055
(ariable ar)-.325 F .055(guments must be the same, and each of the)-.234
F(ar)33.336 615 Q(guments' types must be compatbile.)-.234 E 1.809(Each\
 structure or union de\214nition creates a distinct type which is not c\
ompatible with)33.336 636 R(an)33.336 651 Q(ything else.)-.195 E
(It is the tag, or a typedef alias, which captures this.)6.5 E(Thus:)6.5
E/F4 10/Courier@0 SF(struct {int a;int b;} x;)33.336 663 Q
(struct {int a; int b;} y;)33.336 675 Q F1 .738
(the types of x and y are not compatible, e)33.336 690 R -.195(ve)-.325
G 3.989(nt).195 G .739(hough the elements are declared the same)-3.989 F
-.13(wa)33.336 705 S 4.94 -.845(y. O).13 H 3.25(fc).845 G(ourse, when C\
 programs are compiled from separate source \214les, the compiler')-3.25
E(s)-.715 E 2.287(type checking systems are bypassed.)33.336 720 R 2.287
(If x and y abo)8.787 F 2.677 -.195(ve w)-.195 H 2.287
(ere in separate .c \214les, it is).195 F 1.266
(important that the code w)33.336 735 R 1.266(ork as intended.)-.13 F
1.266(The C standard guarantees that the compiler)7.766 F 0 Cg EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 18)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 1.481(will al)33.336 120 R -.13(wa)-.13 G 1.481
(ys lay out structure and union types in a consistent w).13 F(ay)-.13 E
4.731(,s)-.845 G 4.731(ot)-4.731 G 1.482(he members will)-4.731 F(al)
33.336 135 Q -.13(wa)-.13 G(ys be in consistent places.).13 E -1.3 -1.04
(Tw o)33.336 156 T .164
(pointer types are compatible if their pointed-to types are compatible.)
4.454 F .163(The composite)6.663 F 3.085(type is a pointer to the compo\
site of the pointed-to types \(this should be ob)33.336 171 R(vious\).)
-.195 E .223(Pointers may be quali\214ed \(e.g. a const pointer to an i\
nt, as opposed to a pointer to a const)33.336 186 R
(int\) and if so those quali\214ers must agree e)33.336 201 Q
(xactly for compatiblity to hold.)-.195 E/F2 13/Times-Bold@0 SF(Con)
233.354 231 Q -.13(ve)-.52 G(rsions).13 E F1 -1.443(Va)33.336 261 S
(lues of a certain type can be con)1.443 E -.195(ve)-.52 G
(rted to another type in se).195 E -.195(ve)-.325 G(ral w).195 E(ays:)
-.13 E 3.25<8341>33.336 276 S 3.25(ne)-3.25 G(xplicit cast e)-3.445 E
(xpression)-.195 E 3.25<8349>33.336 291 S(mplicit con)-3.25 E -.195(ve)
-.52 G(rsions which happen to the ar).195 E(guments of man)-.234 E 3.25
(yo)-.195 G(perators)-3.25 E 3.25<8349>33.336 306 S(mplicit con)-3.25 E
-.195(ve)-.52 G(rsions of actual ar).195 E(guments to a function call)
-.234 E 3.25<8349>33.336 321 S(mplicit con)-3.25 E -.195(ve)-.52 G
(rsion of return v).195 E(alue from function \(as if by assignment\))
-.325 E 3.579<8341>33.336 336 S 3.579(na)-3.579 G .329
(rea of memory which contains a v)-3.579 F .329(alue of one type is vie)
-.325 F .33(wed as being of a dif)-.325 F(ferent)-.325 E
(type, either by mistak)33.336 351 Q 3.25(eo)-.13 G 3.25(ro)-3.25 G 3.25
(np)-3.25 G(urpose.)-3.25 E(Con)33.336 387 Q -.195(ve)-.52 G .77
(rsions between inte).195 F .77(ger types do not in)-.195 F -.26(vo)-.52
G(lv).26 E 4.02(ea)-.195 G 1.16 -.195(ny c)-4.02 H .77
(hange to the actual bit v).195 F .769(alues, as)-.325 F
(long as the types are the same size.)33.336 402 Q 3.25(E.g. the)6.5 F
-.195(ex)3.25 G(pression).195 E/F3 10/Courier@0 SF(a=\(unsigned int\)b;)
33.336 426 Q F1 3.486(,w)33.336 441 S .236(here b w)-3.486 F .236
(as de\214ned as just int, does nothing.)-.13 F .237
(When the destination type is smaller than)6.737 F 1.084
(the source, the higher)33.336 456 R 1.084(-order bits are discarded.)
-.26 F 1.083(This may create a loss of information if)7.584 F 4.569
(the source v)33.336 471 R 4.569(alue w)-.325 F 4.569
(as outside of the smaller range of the destination.)-.13 F 4.569
(When the)11.069 F .45(destination is wider than the source, the higher)
33.336 486 R .449(-order bits are \214lled with 0 if the source is)-.26
F .25(unsigned, b)33.336 501 R .25(ut if the source is signed, the most\
 signi\214cant bit \(the sign bit\) of the source is)-.26 F -.195(ex)
33.336 516 S 2.545(tended to \214ll the higher).195 F 2.545
(-order bits.)-.26 F 2.545(Most processors ha)9.045 F 2.935 -.195(ve a)
-.26 H 5.795(ni).195 G 2.545(nstruction to do this)-5.795 F
(automatically)33.336 531 Q(.)-.845 E(Con)33.336 552 Q -.195(ve)-.52 G
1.874(rsion of a \215oating point type to an inte).195 F 1.874
(ger results in truncation of the fractional)-.195 F .974
(portion, e.g. 3.5 becomes 3 and -1.7 becomes -1.)33.336 567 R .974
(The \215oating point source may e)7.474 F(xceed)-.195 E 1.281
(the range of the inte)33.336 582 R 1.281
(ger destination \(e.g. 1e+20 can be represented in a 32-bit \215oat, b)
-.195 F(ut)-.26 E 2.159
(not a 32-bit int\) and the results are then unde\214ned.)33.336 597 R
(Con)8.659 E -.195(ve)-.52 G 2.159(rsion of an inte).195 F 2.158
(ger type to)-.195 F 1.902(\215oating point generally w)33.336 612 R
1.902(orks out, b)-.13 F 1.902
(ut it is possible that the \215oating point type is not)-.26 F .114
(precise enough to represent the inte)33.336 627 R .114(ger e)-.195 F
(xactly)-.195 E 6.614(.A)-.845 G .113
(32-bit \215oat can hold the entire range of)-3.25 F 3.382(a6)33.336 642
S .133(4-bit long long \(2**64 is approximately 16e+18\),)-3.382 F -.26
(bu)6.633 G 3.383(tt).26 G .133(he mantissa is not lar)-3.383 F .133
(ge enough)-.234 F 1.025(to hold it e)33.336 657 R(xactly)-.195 E 7.525
(.S)-.845 G 1.025(imilar rules hold for con)-7.525 F -.195(ve)-.52 G
1.025(rsions between \215oating types of dif).195 F(ferent)-.325 E
(size.)33.336 672 Q .446(Pointers may be con)33.336 693 R -.195(ve)-.52
G .446(rted to inte).195 F .447(gers and vice-v)-.195 F 3.697(ersa. It)
-.195 F .447(is not guaranteed that a memory)3.697 F .291
(address \(pointer\) will \214t into an int, or e)33.336 708 R -.195(ve)
-.325 G 3.541(nal).195 G 3.541(ong. E.g.)-3.541 F .291
(the model might be that ints and)3.541 F 2.568(longs are 32 bits, b)
33.336 723 R 2.569(ut addresses are 64.)-.26 F(Ho)9.069 E(we)-.325 E
-.195(ve)-.325 G 3.609 -.52(r, i).195 H 5.819(na).52 G 2.569
(lmost all cases, there is some)-5.819 F(inte)33.336 738 Q .107
(ger type which can hold the pointer \(long long in the pre)-.195 F .106
(vious e)-.325 F 3.356(xample\). Pointers)-.195 F(and)3.356 E 0 Cg EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 19)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(inte)33.336 120 Q 2.573
(gers are not "compatible types", though, so con)-.195 F -.195(ve)-.52 G
2.573(rsions between them generate a).195 F -.13(wa)33.336 135 S .12
(rning unless performed e).13 F .12(xplicitly with a cast.)-.195 F .12
(An e)6.62 F .12(xception is made for the constant 0,)-.195 F
(which can al)33.336 150 Q -.13(wa)-.13 G(ys be con).13 E -.195(ve)-.52
G(rted to an).195 E 3.25(yp)-.195 G
(ointer type because it is the NULL pointer)-3.25 E(.)-.715 E 1.915
(Pointers to dif)33.336 171 R 1.915(ferent types may generally be con)
-.325 F -.195(ve)-.52 G 1.915(rted without an).195 F 5.166(ya)-.195 G
1.916(ctual changing of)-5.166 F 3.425(bits. De-referencing)33.336 186 R
3.425(ap)3.425 G .175
(ointer of one type as another type may produce unde\214ned results,)
-3.425 F(e.g.)33.336 201 Q/F2 10/Courier@0 SF(f\(\))33.336 213 Q({)
33.336 225 Q(int a;)33.336 237 Q(float *fp;)33.336 249 Q(a=1;)90.936 261
Q(fp=\(float *\)&a;)90.936 273 Q(printf\("%g\\n",*fp\);)90.936 285 Q(})
33.336 297 Q F1 .226(Additional comple)33.336 312 R .227(xity is introd\
uced on architectures which impose alignment restrictions)-.195 F 1.527
(on certain operations.)33.336 327 R 1.527(In the follo)8.027 F 1.526
(wing e)-.325 F 1.526(xample, the de-referencing of the pointer may)
-.195 F .884(result in a run-time f)33.336 342 R .885
(atal error because the v)-.13 F .885(alue of b)-.325 F(uf)-.26 E .885
(fer is not necessarily aligned to a)-.325 F(4-byte boundary)33.336 357
Q(.)-.845 E F2(g\(char *buffer\))33.336 369 Q({)33.336 381 Q(long *lp;)
39.336 393 Q(lp=\(long *\)buffer;)90.936 405 Q(printf\("%d\\n",*lp\);)
90.936 417 Q(})33.336 429 Q F1 1.232(The C standard imposes an addition\
al restriction that a pointer to a function can not be)33.336 444 R(con)
33.336 459 Q -.195(ve)-.52 G .587(rted to a pointer to a v).195 F .587
(ariable or vice-v)-.325 F 3.837(ersa. This)-.195 F .587
(is because on some architectures,)3.837 F 3.389(function and v)33.336
474 R 3.388(ariable pointers may ha)-.325 F 3.778 -.195(ve v)-.26 H
3.388(astly dif)-.13 F 3.388(ferent representations \(e.g. a PIC)-.325 F
5.055(microcontroller\). Ho)33.336 489 R(we)-.325 E -.195(ve)-.325 G
2.846 -.52(r, a f).195 H 1.806(unction pointer can still be con).52 F
-.195(ve)-.52 G 1.806(rted to an inte).195 F(ger)-.195 E 5.056(,a)-.52 G
(nd)-5.056 E 2.251(that inte)33.336 504 R 2.251(ger con)-.195 F -.195
(ve)-.52 G 2.251(rted to a v).195 F 2.251(ariable pointer)-.325 F 5.501
(,s)-.52 G 5.501(ot)-5.501 G 2.251
(he reasoning behind this restriction is)-5.501 F(dubious.)33.336 519 Q
/F3 13/Times-Bold@0 SF(Casts)252.171 579 Q F1 4.387(At)33.336 615 S
1.138(ype cast e)-4.387 F 1.138(xpression is used to force an e)-.195 F
1.138(xplicit con)-.195 F -.195(ve)-.52 G 1.138
(rsion from one type to another).195 F(.)-.715 E 1.042
(Arithmetic types can be freely cast among each other)33.336 630 R 7.542
(.P)-.715 G 1.041(ointers can be cast to and from)-7.542 F(inte)33.336
645 Q 2.313(ger types.)-.195 F 2.313(Pointers to one type can be cast t\
o pointers to another type, including)8.813 F .659(pointers to v)33.336
660 R .659(oid, e)-.26 F .659
(xcept that restrictions are imposed to pre)-.195 F -.195(ve)-.325 G
.658(nt casting between function).195 F 1.137(and v)33.336 675 R 1.137
(ariable pointers \(b)-.325 F 1.137(ut this can be circumv)-.26 F 1.137
(ented by casting through an inte)-.195 F 1.137(ger type\).)-.195 F
2.805(casting an)33.336 690 R 6.055(yt)-.195 G 2.805(ype to)-6.055 F/F4
13/Courier@0 SF(void)6.055 E F1 2.805(means discarding its v)6.055 F
6.055(alue. structures,)-.325 F 2.804(unions, arrays and)6.054 F .238
(functions can not be cast.)33.336 705 R -1.04(Ty)6.738 G .238
(pe quali\214ers do not af)1.04 F .239(fect casting and in f)-.325 F
.239(act e)-.13 F .239(xplicit casting)-.195 F(is generally used to e)
33.336 720 Q(xplicitly o)-.195 E -.195(ve)-.195 G(rride them.).195 E 0
Cg EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 20)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Bold@0 SF(Function/Array P)166.124 120 Q(ointer Equi)-.26 E
-.13(va)-.13 G(lence).13 E/F2 13/Times-Roman@0 SF(An e)33.336 156 Q
(xpression of type array of E is con)-.195 E -.195(ve)-.52 G
(rted to a pointer to E in e).195 E -.195(ve)-.325 G(ry conte).195 E
(xt e)-.195 E(xcept:)-.195 E 3.25<8357>33.336 171 S
(hen the array is the ar)-3.25 E
(gument to the & \(address-of\) or sizeof operator)-.234 E 3.25<8357>
33.336 186 S(hen a string literal \(which is really an array of char\) \
is used as an initializer)-3.25 E(.)-.715 E .408(This con)33.336 207 R
-.195(ve)-.52 G .408(rsion could be stated in another w).195 F .408
(ay: in most conte)-.13 F .408(xts, the name of an array is)-.195 F
(really the address of its \214rst element.)33.336 222 Q 2.339(An e)
33.336 243 R 2.339(xpression of type function is con)-.195 F -.195(ve)
-.52 G 2.339(rted to a pointer to function in e).195 F -.195(ve)-.325 G
2.34(ry conte).195 F(xt)-.195 E -.195(ex)33.336 258 S 2.266(cept as the\
 operand to the & or sizeof operators \(furthermore it is in).195 F
-.325(va)-.52 G 2.265(lid to apply).325 F 1.144
(sizeof to a function name\).)33.336 273 R 1.145
(One could also say that this con)7.645 F -.195(ve)-.52 G 1.145
(rsion does not tak).195 F 4.395(ep)-.13 G(lace)-4.395 E 2.122(when the\
 function name is used to call the function, or one could say the con)
33.336 288 R -.195(ve)-.52 G(rsion).195 E .705(happens and that')33.336
303 R 3.955(sO)-.715 G 3.955(Kb)-3.955 G .705
(ecause a function can be called with a pointer to a function too.)
-3.955 F(Ag)33.336 318 Q 1.12(ain, another w)-.065 F 1.119(ay of saying\
 all this is that a function name is really the address of its)-.13 F
(\214rst machine-language instruction.)33.336 333 Q F1(Assignment Con)
199.229 363 Q -.13(ve)-.52 G(rsions).13 E F2 3.459(When the types of th\
e left and right side of an assignment \(including the implicit)33.336
399 R 1.904(assignment in a return statement\) are not identical, a con)
33.336 414 R -.195(ve)-.52 G 1.904(rsion will tak).195 F 5.154(ep)-.13 G
5.154(lace. This)-5.154 F(con)33.336 429 Q -.195(ve)-.52 G .938
(rsion is the same as if an e).195 F .938(xplicit cast were made, e)
-.195 F .938(xcept certain combinations are)-.195 F .288(not allo)33.336
444 R 3.538(wed. An)-.325 F 3.538(ya)-.195 G .288
(rithmetic type can be assigned to an)-3.538 F 3.538(yo)-.195 G .288
(ther arithmetic type, unless the)-3.538 F .259
(destination type is quali\214ed with)33.336 459 R/F3 13/Courier@0 SF
(const)3.509 E F2 6.759(.s)C .259
(tructs and unions can only be assigned if both)-6.759 F .089
(sides are of identical type.)33.336 474 R(An)6.589 E 3.339(yp)-.195 G
.089(ointer to a v)-3.339 F .089(ariable can be assigned to a v)-.325 F
.088(oid * and vice-)-.26 F -.195(ve)33.336 489 S 3.498(rsa. An).195 F
3.498(yp)-.195 G .249(ointer can be assigned to an)-3.498 F 3.499(yo)
-.195 G .249(ther pointer if the)-3.499 F 3.499(yp)-.195 G .249
(oint to compatible types.)-3.499 F(The inte)33.336 504 Q
(ger constant 0 \(NULL pointer\) can be assigned to an)-.195 E 3.25(yp)
-.195 G(ointer)-3.25 E(.)-.715 E .477(If the abo)33.336 525 R .867 -.195
(ve c)-.195 H .477(riteria are not met, a w).195 F .477
(arning is generally gi)-.13 F -.195(ve)-.325 G .477
(n, and then the assignment is).195 F 3.965(attempted as if an e)33.336
540 R 3.966(xplicit cast were used.)-.195 F 3.966
(If such a cast is not permissible, the)10.466 F
(assignment is in error \(e.g.)33.336 555 Q
(attempt to assign a struct into an int\).)6.5 E F1
(Unary and Binary Arithmetic pr)151.538 585 Q(omotions)-.234 E F2 1.533
(In most cases, v)33.336 621 R 1.533(alues of inte)-.325 F 1.532
(ger type smaller than int \(short, char\) are promoted to int.)-.195 F
5.199(This reduces the comple)33.336 636 R 5.199
(xity of the code which the compiler must generate for)-.195 F -.195(ex)
33.336 651 S 4.717(pressions. Generally).195 F 4.717(,i)-.845 G 1.466
(nt is the natural re)-4.717 F 1.466
(gister size of an architecture, so it isn')-.195 F 4.716(ta)-.234 G
-.195(ny)-4.716 G -.13(fa)33.336 666 S(ster or cheaper to do 8-bit inte)
.13 E(ger operations if the machine is naturally 32 bit.)-.195 E 1.497
(One thing which ANSI C "brok)33.336 687 R 1.497(e" in)-.13 F -.26(vo)
-.52 G(lv).26 E 1.497(es promotions of unsigned short and unsigned)-.195
F(char)33.336 702 Q 9.278(.I)-.715 G 6.028(nK)-9.278 G 2.778
(&R C, these were promoted to unsigned int, b)-6.028 F 2.777
(ut in Standard C, the)-.26 F 6.027(ya)-.195 G(re)-6.027 E 2.913(promot\
ed to int, as long as int is strictly wider than the original type and \
can thus)33.336 717 R 2.03(represent the entire range.)33.336 732 R 2.03
(The problem with this is that the e)8.53 F 2.029
(xpression then loses its)-.195 F 0 Cg EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 21)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF(unsignedness, which can sometimes be a problem.)
33.336 120 Q 2.342(K&R C promoted \215oats to doubles, b)33.336 141 R
2.342(ut ANSI C doesn')-.26 F 5.592(tr)-.234 G 2.342(equire this.)-5.592
F(Unlik)8.842 E 5.592(ei)-.13 G(nte)-5.592 E(ger)-.195 E .297
(operations, it is quite lik)33.336 156 R .297
(ely that single-precision \215oating point operators are indeed f)-.13
F(aster)-.13 E(than double, so if the programmer isn')33.336 171 Q 3.25
(ta)-.234 G(sking for the additional precision, wh)-3.25 E 3.25(yd)-.065
G 3.25(oi)-3.25 G(t?)-3.25 E .167(When an e)33.336 192 R .168
(xpression operator is presented with tw)-.195 F 3.418(os)-.13 G(ube)
-3.418 E .168(xpressions of dif)-.195 F .168(fering types, one)-.325 F
1.572(of them must be promoted before the operation mak)33.336 207 R
1.572(es sense.)-.13 F 1.572(So, after performing the)8.072 F 2.439
(unary promotions described abo)33.336 222 R -.195(ve)-.195 G 5.689(,i)
.195 G 5.689(ft)-5.689 G 2.439(he types are still dif)-5.689 F 2.439
(ferent, the "lesser" type is)-.325 F 3.252(promoted. E.g. when)33.336
237 R .002(adding a double to an int, the int is promoted to double.)
3.252 F .001(Adding an)6.501 F
(int to a long long results in promotion to long long.)33.336 252 Q .041
(In classic C without prototypes, the actual types of the ar)33.336 273
R .042(guments are not kno)-.234 F .042(wn when the)-.325 F 1.63
(compiler sees the function call.)33.336 288 R 3.71 -1.04(To s)8.13 H
1.63(implify ar)1.04 F 1.629(gument marshalling, classic C promotes)
-.234 F .488
(\215oats to doubles, and promotes char and short as described abo)
33.336 303 R -.195(ve)-.195 G 6.988(.I).195 G 3.738(nS)-6.988 G .488
(tandard C, with a)-3.738 F 1.551(prototype in ef)33.336 318 R 1.551
(fect, these promotions are not required to be performed.)-.325 F 1.55
(This is a good)8.05 F .15(optimization for \215oats, as discussed abo)
33.336 333 R -.195(ve)-.195 G 3.4(,b).195 G .151
(ut not so important for inte)-3.66 F .151(ger types.)-.195 F .151(In f)
6.651 F(act,)-.13 E .122
(most implementations will promote char and short ar)33.336 348 R .121
(guments an)-.234 F(yw)-.195 E(ay)-.13 E 6.621(.I)-.845 G 3.371(ft)
-6.621 G .121(he function has)-3.371 F 4.073(ap)33.336 363 S .823
(rototype that speci\214es v)-4.073 F .824(ariable ar)-.325 F .824
(guments, those ar)-.234 F .824(guments must al)-.234 F -.13(wa)-.13 G
.824(ys be promoted).13 F(because their type is not kno)33.336 378 Q
(wn.)-.325 E/F2 13/Times-Bold@0 SF(Expr)234.225 423 Q(essions)-.234 E F1
.523(The C language has an unusually rich e)33.336 459 R .523
(xpression syntax.)-.195 F .523(There are 16 le)7.023 F -.195(ve)-.325 G
.522(ls of operator).195 F 3.296(precedence de\214ned.)33.336 474 R
(Belo)9.796 E 6.546(wi)-.325 G 6.546(sa)-6.546 G 6.546(no)-6.546 G 3.296
(utline of the e)-6.546 F 3.296(xpression syntax and some of the)-.195 F
.56(semantic analysis issues.)33.336 489 R .56
(Of note is the concept of an "lv)7.06 F 3.81(alue". The)-.325 F .56
(original meaning of)3.81 F(lv)33.336 504 Q 2.272(alue w)-.325 F 2.272
(as "something which can be on the left side of an assignment.")-.13 F
2.273(The current)8.773 F 2.072(de\214nitions as seen in the standards \
documents muddy this considerably and introduce)33.336 519 R .922
(some language theory concepts which may not be of an)33.336 534 R 4.172
(yi)-.195 G .922(nterest to the compiler writer)-4.172 F(.)-.715 E .614
(An lv)33.336 549 R .614(alue is an object which can be e)-.325 F .613
(xamined and possibly modi\214ed.)-.195 F 2.693 -1.04(We c)7.113 H .613
(ould say that)1.04 F .189(an lv)33.336 564 R .189(alue is something ot\
her than a function for which it is meaningful to tak)-.325 F 3.44(ei)
-.13 G .19(ts address.)-3.44 F(This is almost correct e)33.336 579 Q
(xcept for)-.195 E/F3 13/Courier@0 SF(register)3.25 E F1 -.325(va)3.25 G
(riables.).325 E 2.925(An e)33.336 600 R 2.924
(xpression is said to produce)-.195 F/F4 13/Times-Italic@0 SF(side-ef)
6.174 E(fects)-.234 E F1 2.924(if it includes pre or post increment or)
6.174 F 1.149
(decrement operators, assignment operators or function calls.)33.336 615
R 1.149(If the e)7.649 F 1.15(xpression produces)-.195 F .375
(no side-ef)33.336 630 R .375(fects, then a w)-.325 F .375
(arning may be generated unless the e)-.13 F .375(xpression v)-.195 F
.375(alue is e)-.325 F(xplicitly)-.195 E(cast to)33.336 645 Q F3
(\(void\))3.25 E F1(.)A F2(Primary Expr)180.054 675 Q(essions \(Le)-.234
E -.13(ve)-.195 G 3.25(l1).13 G(6\))-3.25 E F1<83>33.336 705 Q F3(IDENT)
3.958 E F1 3.958(:i)C 3.958(ft)-3.958 G .708(he name of a v)-3.958 F
.708(ariable, this is an lv)-.325 F .709(alue, unless the v)-.325 F .709
(ariable is of array type,)-.325 F 1.141(in which case the e)33.336 720
R 1.141(xpression is con)-.195 F -.195(ve)-.52 G 1.141
(rted to a pointer to the element type and is not an).195 F(lv)33.336
735 Q 5.285(alue. This)-.325 F(con)5.285 E -.195(ve)-.52 G 2.035
(rsion doesn').195 F 5.285(th)-.234 G 2.035(appen if this primary e)
-5.285 F 2.035(xpression is the operand of a)-.195 F 0 Cg EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 22)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 1.275(sizeof or & operator)33.336 120 R 7.775(.T)
-.715 G(echnically)-8.685 E 4.525(,t)-.845 G 1.275(he v)-4.525 F 1.275
(ariable of array type is an lv)-.325 F 1.274(alue \(it has storage)
-.325 F .286(associated with it and we can tak)33.336 135 R 3.536(ei)
-.13 G .286(ts address\), b)-3.536 F .286(ut because of this def)-.26 F
.286(ault con)-.13 F -.195(ve)-.52 G .286(rsion to a).195 F 3.465
(pointer type, this distinction really doesn')33.336 150 R 6.715(tm)
-.234 G(atter)-6.715 E 9.965(.T)-.715 G 3.465
(he name of a function is also)-9.965 F(con)33.336 165 Q -.195(ve)-.52 G
2.284(rted to a pointer to a function e).195 F 2.285
(xcept when applied to sizeof or &.)-.195 F(Ag)8.785 E 2.285(ain, this)
-.065 F .75(distinction is a hair)33.336 180 R(-splitter)-.26 E 3.999
(,s)-.52 G .749(ince sizeof a function is not v)-3.999 F .749
(alid, and there is no reason to)-.325 F 1.447
(use & on a function name.)33.336 195 R 1.448
(If the identi\214er is the name of an enum constant, then this)7.947 F
-.195(ex)33.336 210 S .805(pression has the v).195 F .804
(alue of that constant, and an inte)-.325 F .804
(ger type of the compiler')-.195 F 4.054(sc)-.715 G(hoosing)-4.054 E
1.604(\(generally just int\).)33.336 225 R 1.604(enum constants can')
8.104 F 4.854(tb)-.234 G 4.854(el)-4.854 G -.325(va)-4.854 G 4.854
(lues. Other).325 F 1.604(uses of an identi\214er \(tags,)4.854 F
(members, labels, typedef names\) are not a primary e)33.336 240 Q
(xpression.)-.195 E 4.634<836c>33.336 255 S 1.384(iteral: Inte)-4.634 F
(ger)-.195 E 4.634<2c8d>-.52 G 1.384
(oating-point, character and string literals are all primary e)-4.634 F
(xpressions.)-.195 E .625(Their type is inferred from their le)33.336
270 R .625(xical pattern, including possible modi\214ers such as)-.195 F
/F2 13/Courier@0 SF(UL)3.875 E F1(,)A .377(and \(in the case of inte)
33.336 285 R .376(gers\) by their v)-.195 F .376
(alue in relation to the range of v)-.325 F .376(alues representable)
-.325 F 1.761(by each scalar type.)33.336 300 R 1.761
(string literals are of type array of char)8.261 F 5.012(,b)-.52 G 1.762
(ut the)-5.272 F 5.012(ya)-.195 G 1.762(re con)-5.012 F -.195(ve)-.52 G
1.762(rted to).195 F .218(pointer to char in all cases e)33.336 315 R
.217(xcept as the operand to a sizeof, operand to &, or when being)-.195
F .377(used to initialize an array of char)33.336 330 R 6.878(.T)-.715 G
(echnically)-7.788 E 3.628(,as)-.845 G .378(tring literal is an lv)
-3.628 F .378(alue, b)-.325 F .378(ut because of)-.26 F .655(the def)
33.336 345 R .655(ault con)-.13 F -.195(ve)-.52 G .655
(rsion to a pointer type, do we really care?).195 F .655
(It is implementation-speci\214c)7.155 F
(whether a string literal can be modi\214ed.)33.336 360 Q<83>33.336 375
Q F2 10.611(\(e)6.061 G 2.811(xpr \))-10.611 F F1 6.061(:P)10.611 G
2.811(arentheses do nothing, the v)-6.256 F 2.812
(alue and type is that of the enclosed)-.325 F -.195(ex)33.336 390 S
3.842(pression. The).195 F 3.842(ya)-.195 G .592
(re used for style or to escape the normal precedence and associati)
-3.842 F(vity)-.325 E(rules.)33.336 405 Q/F3 13/Times-Bold@0 SF -.26(Po)
173.859 435 S(st\214x expr).26 E(essions \(also Le)-.234 E -.13(ve)-.195
G 3.25(l1).13 G(6\))-3.25 E F1<83>33.336 465 Q F2(e1[e2])8.431 E F1
8.431(:A)C 8.431(na)-8.431 G 5.181(rray subscripting e)-8.431 F 5.181
(xpression is de\214ned as e)-.195 F 5.181(xactly equi)-.195 F -.325(va)
-.325 G 5.182(lent to).325 F F2(*\(e1+e2\))33.336 480 Q F1 7.085(.S)C
.585(ince addition is commutati)-7.085 F -.195(ve)-.325 G 3.835(,t).195
G .585(his imples that)-3.835 F F2(e2[e1])3.835 E F1 .585(is also equi)
3.835 F -.325(va)-.325 G(lent,).325 E .213(although that w)33.336 495 R
.213(ould be stylistically strange.)-.13 F .214
(e1 must be a pointer type, and e2 must be an)6.714 F(inte)33.336 510 Q
.517(ger type, or vice-v)-.195 F 3.767(ersa. As)-.195 F 3.767(ar)3.767 G
.516(esult of the implicit binary + operator)-3.767 F 3.766(,t)-.52 G
.516(he usual binary)-3.766 F 4.578(promotions and con)33.336 525 R
-.195(ve)-.52 G 4.578(rsions are applied to e1 and e2.).195 F 4.579
(See discussion of pointer)11.078 F 4.341(arithmetic. If)33.336 540 R
1.09(the pointer type is "pointer to T", the result of the subscript e)
4.341 F 1.09(xpression is)-.195 F(type "T".)33.336 555 Q
(The result is al)6.5 E -.13(wa)-.13 G(ys an lv).13 E(alue.)-.325 E<83>
33.336 570 Q F2(e1.IDENT)4.134 E F1 4.134(:e)C 4.134(1m)-4.134 G .885(u\
st be of struct or union type and the de\214nition of that type must be)
-4.134 F 4.608(complete. IDENT)33.336 585 R 1.358
(must be a member within that type.)4.608 F 1.357
(The result is of the type of the)7.858 F(member)33.336 600 Q 7.244(.I)
-.715 G 3.994(fe)-7.244 G .744(ither the member or e1 ha)-3.994 F 1.134
-.195(ve q)-.26 H .745(uali\214ers, the result type is the inclusi).195
F -.195(ve)-.325 G .745(-or of).195 F .211(those quali\214ers.)33.336
615 R .211(The result is an lv)6.711 F .21(alue if)-.325 F 3.46(fe)-.325
G 3.46(1i)-3.46 G 3.46(sa)-3.46 G 3.46(nl)-3.46 G -.325(va)-3.46 G .21
(lue \(struct and unions returned by a).325 F(function are not lv)33.336
630 Q(alues\).)-.325 E<83>33.336 645 Q F2(e1->IDENT)3.25 E F1 3.25(:T)C
(his is e)-3.25 E(xactly equi)-.195 E -.325(va)-.325 G(lent to).325 E F2
(\(*e1\).IDENT)3.25 E F1(.)A 3.566<8346>33.336 660 S .316
(unction Call: The type of the e)-3.566 F .317
(xpression appearing to the left of the parentheses which)-.195 F .252
(surround the \(possibly empty\) actual ar)33.336 675 R .251
(gument list must be "pointer to function...".)-.234 F(Since)6.751 E
1.807(an e)33.336 690 R 1.807(xpression of function type gets con)-.195
F -.195(ve)-.52 G 1.807(rted to a pointer to a function, this w).195 F
1.807(orks as)-.13 F 6.655(intended. It)33.336 705 R 3.405
(also means that gi)6.655 F -.195(ve)-.325 G 6.654(naf).195 G 3.404
(unction pointer)-6.654 F 6.654(,i)-.52 G 6.654(ti)-6.654 G 6.654(sn)
-6.654 G 3.404(ot necessary to use)-6.654 F F2(*)6.654 E F1 -.195(ex)
33.336 720 S .944(plicitly to call the function, although it is usually\
 good style to do so.).195 F .944(The ar)7.444 F(guments)-.234 E .229
(are con)33.336 735 R -.195(ve)-.52 G .229
(rted as if by assignment to the types speci\214ed in the prototype, b)
.195 F .228(ut ar)-.26 F .228(guments in)-.234 F 0 Cg EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 23)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF .393(the v)33.336 120 R .393(ariable portion of the\
 prototype are subject to the usual promotions discussed abo)-.325 F
-.195(ve)-.195 G(,).195 E .828(as are an)33.336 135 R 4.078(ya)-.195 G
-.234(rg)-4.078 G .828
(uments of a function called without a prototype visible.).234 F .827
(The result type is)7.327 F(the return type of the function, and is ne)
33.336 150 Q -.195(ve)-.325 G 3.25(ra).195 G 3.25(nl)-3.25 G -.325(va)
-3.25 G(lue.).325 E<83>33.336 165 Q/F2 13/Courier@0 SF(e++)3.666 E F1
3.666(:em)C .417(ust be a modi\214able lv)-3.666 F .417(alue of inte)
-.325 F(ger)-.195 E 3.667(,e)-.52 G .417(num, real or pointer type.)
-3.667 F .417(The ef)6.917 F .417(fect of)-.325 F 2.337(this e)33.336
180 R 2.337(xpression is similar to)-.195 F F2(\(temp=e,e=e+1,temp\))
5.587 E F1 8.836(.e)C 2.336(is subjected to the binary)-3.25 F(con)
33.336 195 Q -.195(ve)-.52 G 1.188
(rsions because of the increment, and the assignment con).195 F -.195
(ve)-.52 G 1.188(rsions when storing the).195 F .487(result back in e.)
33.336 210 R .487(The result type is the type of e \(before an)6.987 F
3.737(yc)-.195 G(on)-3.737 E -.195(ve)-.52 G .486(rsions\) and is ne)
.195 F -.195(ve)-.325 G 3.736(ra).195 G(n)-3.736 E(lv)33.336 225 Q
(alue.)-.325 E<83>33.336 240 Q F2(e--)3.25 E F1 3.25(:s)C(ee abo)-3.25 E
-.195(ve)-.195 G 6.016<8343>33.336 255 S 2.766
(ompound literals: C99 introduces a w)-6.016 F 2.766
(ay to create a literal of an)-.13 F 6.017(ya)-.195 G(ggre)-6.017 E
-.065(ga)-.195 G 2.767(te type).065 F 4.114
(including struct, union or array)33.336 270 R 10.614(.T)-.845 G 4.113
(his is actually some)-10.614 F 4.113(what handy)-.325 F 10.613(.T)-.845
G 4.113(he syntax is)-10.613 F 2.216
(documented in the C standard and Harbison & Steele.)33.336 285 R 2.216
(The result is an lv)8.716 F 2.216(alue and is)-.325 F 4.77
(modi\214able unless a const quali\214er is used.)33.336 300 R 4.769
(Compound literals are approximately)11.27 F(equi)33.336 315 Q -.325(va)
-.325 G 2.158(lent to ha).325 F 2.158(ving declared a v)-.26 F 2.158
(ariable of the same type with an initializer and then)-.325 F(for)
33.336 330 Q(getting the name of that v)-.234 E
(ariable after it is used in an e)-.325 E(xpression.)-.195 E/F3 13
/Times-Bold@0 SF(Unary Expr)165.598 360 Q(essions \(Le)-.234 E -.13(ve)
-.195 G 3.25(l1).13 G 3.25(5a)-3.25 G(nd 14\))-3.25 E F1<83>33.336 390 Q
F2 .28(\(type_name\) e)3.53 F F1 3.53(:A)C 3.53(ne)-3.53 G .28
(xplicit cast con)-3.725 F -.195(ve)-.52 G .279(rsion, as pre).195 F
.279(viously described.)-.325 F F2(type_name)6.779 E F1 1.018(is an)
33.336 405 R/F4 13/Times-Italic@0 SF(abstr)4.268 E 1.018(act declar)
-.195 F(ation)-.195 E F1 4.268(,w)C 1.019
(hich has the same syntax as a re)-4.268 F 1.019(gular declaration b)
-.195 F 1.019(ut omits)-.26 F 3.127(the identi\214er which w)33.336 420
R 3.127(ould normally be declared.)-.13 F 3.126
(Abstract declarations may contain)9.626 F .057
(quali\214ers such as const, b)33.336 435 R .057(ut the)-.26 F 3.307(yc)
-.195 G .058(an not include storage class speci\214ers, or the)-3.307 F
F2(typedef)3.308 E F1 -.13(ke)33.336 450 S(yw)-.065 E 3.79(ord. The)-.13
F .54(result is ne)3.79 F -.195(ve)-.325 G 3.79(ra).195 G 3.79(nl)-3.79
G -.325(va)-3.79 G .54(lue and has the type).325 F F2(type_name)3.79 E
F1 7.04(.c)C .54(asts are listed at)-7.04 F 1.967
(precedence 14, while all other Unary Expressions are at 15.)33.336 465
R 1.967(This resolv)8.467 F 1.967(es a potential)-.195 F
(parsing ambiguity:)33.336 480 Q/F5 10/Courier@0 SF(sizeof\(int\)*p)
33.336 492 Q(is NOT sizeof \( \(int\)*p\)\))90.936 504 Q(it IS)90.936
516 Q(\(sizeof\(int\)\)*p)12 E F1<83>33.336 546 Q F2 .815
(sizeof \( type_name \))4.065 F F1(:)A F2 .815(sizeof expr)4.065 F F1
4.065(:T)8.615 G .815(he sizeof operator returns the size,)-4.065 F .586
(in bytes, of the gi)33.336 561 R -.195(ve)-.325 G 3.836(ne).195 G .587
(xpression or of the gi)-4.031 F -.195(ve)-.325 G 3.837(nt).195 G .587
(ype name.)-3.837 F .587(The return type is)7.087 F F2(size_t)3.837 E F1
(,)A 3.109(which is a typedef de\214ned in)33.336 576 R F2(stddef.h)
6.359 E F1 9.609(.T)C 3.109(his type is an inte)-9.609 F 3.109(ger lar)
-.195 F 3.108(ge enough to)-.234 F 1.312(represent the lar)33.336 591 R
1.312(gest possible object.)-.234 F 1.312(On 64-bit architectures,)7.812
F F2(size_t)4.562 E F1 1.312(is going to be a)4.562 F F2 .727(long long)
33.336 606 R F1 3.977(,a)C .727
(lthough the thought of a single object e)-3.977 F .727
(xceeding 2GB is some)-.195 F .727(what scary)-.325 F .914
(at this time.)33.336 621 R F2(size_t)7.414 E F1 .914(is not a ne)4.164
F 4.164(ws)-.325 G .914
(calar type, and its correspondence to an actual type)-4.164 F .554
(such as)33.336 636 R F2(int)3.804 E F1 .554
(is something which is \214x)3.804 F .553
(ed into the compiler when the compiler is b)-.195 F .553(uilt for)-.26
F 4.34(as)33.336 651 S 1.09(peci\214c tar)-4.34 F 1.09
(get architecture.)-.234 F 1.09(The result of sizeof is ne)7.59 F -.195
(ve)-.325 G 4.34(ra).195 G 4.34(nl)-4.34 G -.325(va)-4.34 G 4.341
(lue. As).325 F 1.091(with casts, the)4.341 F 2.173(type_name could inc\
lude struct, union or enum de\214nitions which could be referenced)
33.336 666 R .734(later as long as a tag w)33.336 681 R .735(as gi)-.13
F -.195(ve)-.325 G .735(n, b).195 F .735
(ut this is considered poor style.)-.26 F(If)7.235 E F2(expr)3.985 E F1
.735(is gi)3.985 F -.195(ve)-.325 G .735(n, it is).195 F(NO)33.336 696 Q
4.729(Te)-.52 G -.325(va)-5.054 G 1.479(luated \(b).325 F 1.479
(ut see belo)-.26 F 4.729(wa)-.325 G 1.478(bout v)-4.729 F 1.478
(ariable-length arrays\).)-.325 F 1.478(The usual con)7.978 F -.195(ve)
-.52 G 1.478(rsions do).195 F(not apply to the top-le)33.336 711 Q -.195
(ve)-.325 G 3.25(lo).195 G(perand, b)-3.25 E(ut the)-.26 E 3.25(yd)-.195
G 3.25(ot)-3.25 G 3.25(oa)-3.25 G .39 -.195(ny i)-3.25 H(nner e).195 E
(xpressions:)-.195 E F5(char c;)33.336 723 Q(int i1,i2;)33.336 735 Q 0
Cg EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 24)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
10/Courier@0 SF(i1=sizeof\(c\);)90.936 117 Q(i2=sizeof\(c+1\);)90.936
129 Q/F2 13/Times-Roman@0 SF 1.014(i1 has the v)33.336 144 R 1.014
(alue 1, b)-.325 F 1.014(ut i2 has the v)-.26 F 1.014
(alue 4, because c is promoted.)-.325 F 1.014(Note that parentheses)
7.514 F 3.505(are not required when the)33.336 159 R/F3 13/Courier@0 SF
(expr)6.755 E F2 3.505(form is used.)6.755 F(Ho)10.004 E(we)-.325 E
-.195(ve)-.325 G 4.544 -.52(r, m).195 H(an).52 E 6.754(yp)-.195 G 3.504
(rogrammers ha)-6.754 F -.195(ve)-.26 G(dif)33.336 174 Q .528
(\214culty remembering all 16 precedence le)-.325 F -.195(ve)-.325 G
.529(ls and use them for clarity).195 F 7.029(.I)-.845 G 3.779(ti)-7.029
G 3.779(sa)-3.779 G 3.779(ne)-3.779 G .529(rror to)-3.779 F 1.799
(apply sizeof to an e)33.336 189 R 1.799
(xpression or type name with an incomplete type.)-.195 F 1.798
(Before C99, the)8.298 F -.325(va)33.336 204 S .174(lue of sizeof w).325
F .174(as truly constant and kno)-.13 F .174(wn at compile-time.)-.325 F
.174(When C99 v)6.674 F .174(ariable length)-.325 F
(arrays are used with sizeof, the length control e)33.336 219 Q
(xpression will be e)-.195 E -.325(va)-.325 G(luated:).325 E F1
(main\(\))33.336 231 Q({)33.336 243 Q(int i,j;)33.336 255 Q(i=1;)81.336
279 Q(j=sizeof\(char [i++]\);)81.336 291 Q
(printf\("i=%d j=%d\\n",i,j\);)81.336 303 Q(})33.336 315 Q F2
(this prints)33.336 330 Q F3(i=2 j=1)3.25 E F2(.)A<83>33.336 345 Q F3
(+e)3.25 E(-e)33.336 360 Q F2 3.62(:U)C .37(nary plus and unary ne)-3.62
F -.065(ga)-.195 G .37(tion require an operand of an).065 F 3.619(ya)
-.195 G .369(rithmetic type.)-3.619 F .369(The result)6.869 F(is ne)
33.336 375 Q -.195(ve)-.325 G 3.25(ra).195 G 3.25(nl)-3.25 G -.325(va)
-3.25 G 3.25(lue. The).325 F
(usual unary promotions are applied to the operand.)3.25 E<83>33.336 390
Q F3(!e)4.003 E F2 4.003(:L)C .753(ogical NO)-4.003 F 4.003(Tp)-.52 G
.753(erforms the usual unary promotions and is identical to \(e\)==0.)
-4.003 F(and)7.254 E .605
(therefore the result is of type int, and the operand may be an)33.336
405 R 3.854(ya)-.195 G .604(rithmetic or pointer type.)-3.854 F
(The result is ne)33.336 420 Q -.195(ve)-.325 G 3.25(ra).195 G 3.25(nl)
-3.25 G -.325(va)-3.25 G(lue.).325 E<83>33.336 435 Q F3(~e)3.621 E F2
3.621(:B)C .371(itwise NO)-3.621 F 3.621(Tr)-.52 G .371
(equires an operand of inte)-3.621 F .372(gral type.)-.195 F .372
(The usual unary promotions are)6.872 F 4.134(performed. The)33.336 450
R .883
(result is of the \(possibly promoted\) type of the operand and is ne)
4.134 F -.195(ve)-.325 G 4.133(ra).195 G(n)-4.133 E(lv)33.336 465 Q
(alue.)-.325 E<83>33.336 480 Q F3(&e)3.364 E F2 3.364(:T)C .114
(he operand must either be an lv)-3.364 F .114(alue or a function type.)
-.325 F .115(If the operand is of type T)6.614 F(,)-.962 E .063
(the result is of type pointer to T)33.336 495 R 6.563(.T)-.962 G .063
(he usual con)-6.563 F -.195(ve)-.52 G .062
(rsions and promotions are not applied to).195 F .476(the operand.)
33.336 510 R .476(Note that if v)6.976 F .477
(ariable a is of type array of int, taking &a yields type "pointer)-.325
F 1.35(to array of int".)33.336 525 R 1.35(This does mak)7.85 F 4.6(ead)
-.13 G(if)-4.6 E 1.349
(ference when it comes to pointer arithmetic. It is)-.325 F(in)33.336
540 Q -.325(va)-.52 G 1.501(lid to apply the address-of operator to a v)
.325 F 1.501(ariable of re)-.325 F 1.501(gister storage class, although)
-.195 F(man)33.336 555 Q 5.333(yc)-.195 G 2.083(ompilers will allo)
-5.333 F 5.333(wi)-.325 G 5.333(tw)-5.333 G 2.083(ith a w)-5.333 F 5.333
(arning. Applying)-.13 F 5.333(&t)5.333 G 5.333(oa)-5.333 G 2.082
(function is some)-.001 F(what)-.325 E
(super\215uous since function types are normally con)33.336 570 Q -.195
(ve)-.52 G(rted to pointers an).195 E(yw)-.195 E(ay)-.13 E(.)-.845 E<83>
33.336 585 Q F3(*e)3.875 E F2 3.876(:T)C .626
(he operand must be of type pointer to T)-3.876 F 3.876(,a)-.962 G .626
(nd the result is of type T)-3.876 F 7.126(.T)-.962 G .626(he result is)
-7.126 F .545(an lv)33.336 600 R .545
(alue unless T is a function or array type.)-.325 F .544
(But, since the usual unary con)7.044 F -.195(ve)-.52 G .544(rsions are)
.195 F(applied to the operand, if a is an array type,)33.336 615 Q F3
(*a)3.25 E F2(is equi)3.25 E -.325(va)-.325 G(lent to).325 E F3(a[0])
3.25 E F2(.)A<83>33.336 630 Q F3(--e)3.25 E(++e)33.336 645 Q F2 7.239
(:T)C 3.99(hese pre-increment and pre-decrement operators require a mod\
i\214able lv)-7.239 F(alue)-.325 E(operand and their result is ne)33.336
660 Q -.195(ve)-.325 G 3.25(ra).195 G 3.25(nl)-3.25 G -.325(va)-3.25 G
3.25(lue. The).325 F 3.25(ya)-.195 G(re equi)-3.25 E -.325(va)-.325 G
(lent to).325 E F3(e-=1)3.25 E F2(and)3.25 E F3(e+=1)3.25 E F2(.)A/F4 13
/Times-Bold@0 SF(Multiplicati)166.098 690 Q .26 -.13(ve e)-.13 H(xpr).13
E(essions \(Le)-.234 E -.13(ve)-.195 G 3.25(l1).13 G(3\))-3.25 E F2<83>
33.336 720 Q F3(e1 * e2)3.25 E 7.8<8365>33.336 735 S 7.8(1/e)-7.8 G(2)
-7.8 E 0 Cg EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 25)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Courier@0 SF 12.404<8365>33.336 120 S 12.404(1%e)-12.404 G(2)-12.404
E/F2 13/Times-Roman@0 SF 7.854(:E)C 4.604
(ach operand must be of arithmetic type.)-7.854 F 4.604
(The unary promotion)11.104 F(con)33.336 135 Q -.195(ve)-.52 G .644
(rsions are performed on e1 and e2 to widen inte).195 F .644
(gers small than int, then the binary)-.195 F(con)33.336 150 Q -.195(ve)
-.52 G .199(rsions are performed to promote e1 or e2 to the greater com\
mon type if the).195 F 3.449(ya)-.195 G .199(re not)-3.449 F
(already the same type.)33.336 165 Q
(The result is of this type and is ne)6.5 E -.195(ve)-.325 G 3.25(ra)
.195 G 3.25(nl)-3.25 G -.325(va)-3.25 G(lue.).325 E/F3 13/Times-Bold@0
SF(Additi)181.263 195 Q .26 -.13(ve e)-.13 H(xpr).13 E(essions \(Le)
-.234 E -.13(ve)-.195 G 3.25(l1).13 G(2\))-3.25 E F2<83>33.336 225 Q F1
(e1 + e2)3.25 E F2<83>33.336 240 Q F1 .113(e1 - e2)3.363 F F2 3.363(:T)C
.113(he same unary and binary con)-3.363 F -.195(ve)-.52 G .114
(rsions are applied as discused immediately).195 F(abo)33.336 255 Q
-.195(ve)-.195 G 8.16(.T).195 G 1.659(he operands may both be arithmeti\
c types, or one operand may be of pointer)-8.16 F .654
(type \(it can not be a pointer to a function, a pointer to v)33.336 270
R .654(oid, or a pointer to an)-.26 F .655(ything else)-.195 F 3.17
(whose size is not kno)33.336 285 R 3.169(wn\) and the other of inte)
-.325 F 3.169(ger type.)-.195 F 3.169(In the latter case,)9.669 F/F4 13
/Times-Italic@0 SF(pointer)6.419 E(arithmetic)33.336 300 Q F2 .557
(is performed.)3.807 F .557
(Let us say e1 is the pointer type and e2 is the inte)7.057 F .558
(ger type.)-.195 F -.195(Fo)7.058 G(r).195 E 1.278
(addition, the actual v)33.336 315 R 1.278(alue of the pointer)-.325 F
4.528(,w)-.52 G 1.277(hich is a memory address, is incremented by)-4.528
F F1(e2*sizeof\(*e1\))33.336 330 Q F2 10.444(.F)C 3.944
(or subtraction, it is decremented.)-10.639 F 3.944
(The resulting type is the)10.444 F 2.513(pointer type.)33.336 345 R
-.195(Fo)9.013 G 5.763(rs).195 G 2.513(ubtraction only)-5.763 F 5.763
(,B)-.845 G -.52(OT)-5.763 G 5.763(Ho).52 G 2.513
(perands may be pointers to the same \(or)-5.763 F 1.927
(compatible\) types.)33.336 360 R 1.927
(Then the resulting memory address is)8.427 F F1
(\(e1-e2\)/sizeof\(*e1\))5.178 E F2(.)A 1.131(This is not e)33.336 375 R
1.131(xactly ho)-.195 F 4.381(wt)-.325 G 1.131
(he standard de\214nes it, b)-4.381 F 1.131(ut it is ho)-.26 F 4.381(wt)
-.325 G 1.131(he compiler will probably)-4.381 F .773(implement it.)
33.336 390 R .774(If either pointer is not really pointing at an object\
 of the appropriate type,)7.274 F 3.728(the results are not de\214ned.)
33.336 405 R 3.727(The result type of subtracting tw)10.227 F 6.977(op)
-.13 G 3.727(ointers is of type)-6.977 F F1(ptrdiff_t)33.336 420 Q F2
5.17(,w)C 1.92(hich is going to be an inte)-5.17 F 1.92(ger type lar)
-.195 F 1.921(ge enough to hold an)-.234 F 5.171(ym)-.195 G(emory)-5.171
E 4.378(address. As)33.336 435 R(with)4.377 E F1(size_t)4.377 E F2(,)A
F1(ptrdiff_t)4.377 E F2 1.127(is an architecture-speci\214c typedef.)
4.377 F 1.127(The result)7.627 F(of an additi)33.336 450 Q .39 -.195
(ve ex)-.325 H(pression is ne).195 E -.195(ve)-.325 G 3.25(ra).195 G
3.25(nl)-3.25 G -.325(va)-3.25 G(lue.).325 E F3(Shift expr)191.604 480 Q
(essions \(Le)-.234 E -.13(ve)-.195 G 3.25(l1).13 G(1\))-3.25 E F2<83>
33.336 510 Q F1(e1 << e2)3.25 E F2<83>33.336 525 Q F1 .135(e1 >> e2)
3.385 F F2 3.385(:E)C .135(ach operand must ha)-3.385 F .525 -.195(ve i)
-.26 H(nte).195 E .135(ger type and the unary promotions are applied)
-.195 F 3.155(to each separately)33.336 540 R 9.655(.T)-.845 G 3.155
(here is no need to perform binary con)-9.655 F -.195(ve)-.52 G 3.155
(rsions to promote the).195 F 1.546(operands to a common type.)33.336
555 R 1.546(The result type is ne)8.046 F -.195(ve)-.325 G 4.796(ra).195
G 4.796(nl)-4.796 G -.325(va)-4.796 G 1.547
(lue and is of the \(possibly).325 F(con)33.336 570 Q -.195(ve)-.52 G
(rted\) type of the left operand.).195 E
(Results are unde\214ned if e2 is ne)6.5 E -.065(ga)-.195 G(ti).065 E
-.195(ve)-.325 G(.).195 E F3(Relational expr)176.44 600 Q(essions \(Le)
-.234 E -.13(ve)-.195 G 3.25(l1).13 G(0\))-3.25 E F2<83>33.336 630 Q F1
(e1 < e2)3.25 E F2<83>33.336 645 Q F1(e1 > e2)3.25 E F2<83>33.336 660 Q
F1(e1 <= e2)3.25 E F2<83>33.336 675 Q F1 1.813(e1 >= e2)5.063 F F2 5.063
(:T)C 1.813(he operands must be inte)-5.063 F 1.812
(ger or real types, or pointers to the same or)-.195 F .107
(compatible types.)33.336 690 R .107(The binary con)6.607 F -.195(ve)
-.52 G .108(rsions are applied.).195 F .108
(The result is an int which is either)6.608 F 4.17(0o)33.336 705 S 4.17
(r1a)-4.17 G .92(nd is ne)-4.17 F -.195(ve)-.325 G 4.169(ra).195 G 4.169
(nl)-4.169 G -.325(va)-4.169 G 4.169(lue. F).325 F .919
(or comparisons between inte)-.195 F .919(gers, signedness matters, as)
-.195 F 3.254(we shall see when we study the assembly language which mu\
st be emitted.)33.336 720 R(Some)9.754 E .849
(compilers will catch an error such as)33.336 735 R F1 .848(if \(ui<0\))
4.098 F F2(where)4.098 E F1(ui)4.098 E F2 .848(is an unsigned int.)4.098
F .848(The C)7.348 F 0 Cg EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 26)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 6.687(standard e)33.336 120 R 6.688
(xplains rules for comparisons between pointers which are some)-.195 F
(what)-.325 E 5.232(theoretical. In)33.336 135 R 1.981
(most architectures, the pointers are compared as if the)5.232 F 5.231
(yw)-.195 G 1.981(ere unsigned)-5.231 F(inte)33.336 150 Q
(gers of the appropriate width.)-.195 E/F2 13/Times-Bold@0 SF
(Equality expr)184.376 180 Q(essions \(Le)-.234 E -.13(ve)-.195 G 3.25
(l9).13 G(\))-3.25 E F1<83>33.336 210 Q/F3 13/Courier@0 SF(e1 == e2)3.25
E F1<83>33.336 225 Q F3 .924(e1 != e2)4.173 F F1 4.174(:T)C .924
(he usual binary con)-4.174 F -.195(ve)-.52 G .924
(rsions are performed on the operands, which may).195 F 2.224(be of an)
33.336 240 R 5.474(ya)-.195 G 2.224
(rithmetic type, or pointers to compatible types.)-5.474 F 2.224
(Pointers of an)8.724 F 5.474(yt)-.195 G 2.223(ype may)-5.474 F(al)
33.336 255 Q -.13(wa)-.13 G 1.3(ys be compared ag).13 F 1.3(ainst a v)
-.065 F 1.3(oid *, or ag)-.26 F 1.3(ainst the constant 0.)-.065 F 1.3
(structs and unions can)7.8 F 2.496(not be compared, although the)33.336
270 R 5.746(yc)-.195 G 2.496(an be assigned.)-5.746 F 2.496
(Perhaps this is an o)8.996 F -.195(ve)-.195 G 2.496(rsight in the).195
F 3.374(language. The)33.336 285 R .124(result of an equality e)3.374 F
.124(xpression is an int which is either 0 or 1 and is ne)-.195 F -.195
(ve)-.325 G(r).195 E(an lv)33.336 300 Q(alue.)-.325 E F2(Bitwise expr)
172.468 330 Q(essions \(Le)-.234 E -.13(ve)-.195 G(ls 8, 7, 6\)).13 E F1
<83>33.336 360 Q F3(e1 & e2)3.25 E F1<83>33.336 375 Q F3(e1 ^ e2)3.25 E
F1<83>33.336 390 Q F3 2.954(e1 | e2)6.204 F F1 6.204(:T)C 2.954
(hese are listed in decreasing order of precedence.)-6.204 F 2.953
(The usual binary)9.453 F(con)33.336 405 Q -.195(ve)-.52 G .547
(rsions are applied to the operands, which must be of inte).195 F .547
(ger type.)-.195 F .547(The result is not)7.047 F 1.096(an lv)33.336 420
R 4.346(alue. In)-.325 F 1.096(the author')4.346 F 4.346(so)-.715 G
1.096(pinion, the bitwise operators should ha)-4.346 F 1.486 -.195(ve b)
-.26 H 1.096(een placed abo).195 F -.195(ve)-.195 G 3.319
(the relational and equality operators.)33.336 435 R(Consider:)9.819 E
F3 3.32(if \(i&0x0F==3\))6.569 F F1 6.57(,t)C 3.32(his compares)-6.57 F
.774(0x0F to 3 and then bitwise AND')33.336 450 R 4.024(st)-.715 G .773
(he resulting 1 or 0 with the inte)-4.024 F .773(ger i.)-.195 F .773
(This is almost)7.273 F(ne)33.336 465 Q -.195(ve)-.325 G 3.634(rw).195 G
.384(hat is desired!)-3.634 F .384(Unfortunately it w)6.884 F .384
(ould be a little late and cause a lot of confusion)-.13 F
(to change it no)33.336 480 Q -.845(w.)-.325 G F2(Logical expr)178.604
510 Q(essions \(Le)-.234 E -.13(ve)-.195 G(ls 5, 4\)).13 E F1<83>33.336
540 Q F3(e1 && e2)3.25 E F1<83>33.336 555 Q F3 .886(e1 || e2)4.136 F F1
4.136(:T)C .886(he && operator has higher precedence.)-4.136 F .886
(These operators are sometimes)7.386 F 1.099(called "short-circuit" ope\
rators because it is possible that e2 will not be e)33.336 570 R -.325
(va)-.325 G 1.1(luated if the).325 F .238(result can be determined sole\
ly from e1 \(i.e. e1 is zero for && or non-zero for ||\).)33.336 585 R
.238(This is)6.738 F(put to good use with C idioms such as)33.336 600 Q
/F4 10/Courier@0 SF(char *p;)33.336 612 Q(/*...*/)33.336 624 Q
(if \(p && p[0]!='A'\))33.336 636 Q F1 .74(The operands to && and || ar\
e each subject to the usual unary promotions and can be of)33.336 651 R
(an)33.336 666 Q 4.661(ya)-.195 G 1.411(rithmetic or pointer type.)
-4.661 F(The)7.911 E 4.661(ya)-.195 G 1.411
(re compared to 0 as if by the == or != operator)-4.661 F(.)-.715 E .549
(Note the implicit comparison between a pointer and NULL abo)33.336 681
R -.195(ve)-.195 G 7.049(.T).195 G .549(he result of the &&)-7.049 F
(or || operators is an int and is ne)33.336 696 Q -.195(ve)-.325 G 3.25
(ra).195 G 3.25(nl)-3.25 G -.325(va)-3.25 G(lue.).325 E F2 -1.196(Te)
188.335 726 S -.195(rn)1.196 G(ary expr).195 E(ession \(Le)-.234 E -.13
(ve)-.195 G 3.25(l3).13 G(\))-3.25 E 0 Cg EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 27)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF<83>33.336 120 Q/F2 13/Courier@0 SF(e1?e2:e3)4.473 E
F1 4.473(:N)C 4.473(oo)-4.473 G 1.223(ther language before C had an)
-4.473 F 1.223(ything lik)-.195 F 4.473(et)-.13 G 1.223(he ternary)
-4.473 F 4.473(,o)-.845 G 4.473(rc)-4.473 G(onditional)-4.473 E 4.919
(operator! e1)33.336 135 R 1.669(must be arithmetic or pointer type, an\
d is compared to 0 as if by the ==)4.919 F(operator)33.336 150 Q 9.391
(.I)-.715 G 6.141(fe)-9.391 G 6.141(1i)-6.141 G 6.141(sn)-6.141 G 2.89
(on-zero, then e2 is e)-6.141 F -.325(va)-.325 G 2.89
(luated and that becomes the result of the).325 F -.195(ex)33.336 165 S
.237(pression, otherwise e3 is e).195 F -.325(va)-.325 G 3.488
(luated. e2).325 F .238(and e3 can be of an)3.488 F 3.488(yt)-.195 G
.238(ype and are subject to the)-3.488 F 3.268(usual unary con)33.336
180 R -.195(ve)-.52 G 6.518(rsions. If).195 F(the)6.518 E 6.518(ya)-.195
G 3.267(re not of the same type, the rules are some)-6.518 F(what)-.325
E(comple)33.336 195 Q 6.076(x-b)-.195 G 2.826(asically the)-6.076 F
6.076(ym)-.195 G 2.826(ust be compatible as if by assignment, so the e)
-6.076 F(xpression)-.195 E F2(a=b?c:d)33.336 210 Q F1 2.003(has to w)
5.253 F 5.253(ork. Refer)-.13 F 2.003(to the C standard or)5.253 F/F3 13
/Times-Italic@0 SF 2.003(Harbison & Steele)5.253 F 5.253(,p)-.13 G 2.392
-.195(g. 2)-5.253 H(45).195 E F1 8.502(.T)C(he)-8.502 E
(result of the ternary e)33.336 225 Q(xpression is not an lv)-.195 E
(alue.)-.325 E/F4 13/Times-Bold@0 SF(Assignment expr)175.718 255 Q
(essions \(Le)-.234 E -.13(ve)-.195 G 3.25(l2).13 G(\))-3.25 E F1<83>
33.336 285 Q F2(e1=e2)3.25 E F1<83>33.336 300 Q F2(e1 += e2)3.25 E F1
<83>33.336 315 Q F2(e1 -= e2)3.25 E F1<83>33.336 330 Q F2(e1 *= e2)3.25
E F1<83>33.336 345 Q F2(e1 /= e2)3.25 E F1<83>33.336 360 Q F2(e1 %= e2)
3.25 E F1<83>33.336 375 Q F2(e1 ^= e2)3.25 E F1<83>33.336 390 Q F2
(e1 |= e2)3.25 E F1<83>33.336 405 Q F2(e1 &= e2)3.25 E F1<83>33.336 420
Q F2(e1 <<= e2)3.25 E F1<83>33.336 435 Q F2 .292(e1 >>= e2)3.542 F F1
3.542(:A)3.542 G .292
(ll of the assignment operators are at the same precedence le)-3.542 F
-.195(ve)-.325 G 3.543(la).195 G .293(nd are)-3.543 F(right-associati)
33.336 450 Q -.195(ve)-.325 G 11.492(.T).195 G 4.992
(he compound assignment operators are equi)-11.492 F -.325(va)-.325 G
4.992(lent to a simple).325 F 1.734
(assignment combined with the binary operator)33.336 465 R 4.984(,e)-.52
G 4.984(.g. a+=b)-4.984 F 1.735(is equi)4.985 F -.325(va)-.325 G 1.735
(lent to a=a+b).325 F 8.235(.T)-.52 G(he)-8.235 E 2.557(types of e1 and\
 e2 must be compatible, after applying the usual promotions and the)
33.336 480 R 2.5(assignment con)33.336 495 R -.195(ve)-.52 G 5.75
(rsions. e1).195 F 2.5(must be a modi\214able lv)5.75 F 2.5
(alue and can not be quali\214ed by)-.325 F F2(const)33.336 510 Q F1
7.213(.I)C 3.963(ti)-7.213 G 3.963(sn)-3.963 G .713
(ot possible to "assign a)-3.963 F -.13(wa)-.195 G .712
(y" quali\214ers under a pointer type.).13 F .712(E.g. it is not)7.212 F
-.325(va)33.336 525 S .726(lid to assign a \(const int *\) to a v).325 F
.727(ariable of type \(int *\), because doing so w)-.325 F .727
(ould allo)-.13 F(w)-.325 E .187
(the underlying \(const int\) to be modi\214ed.)33.336 540 R .187
(Of course, the programmer can circumv)6.687 F .187(ent this)-.195 F
(with an e)33.336 555 Q(xplicit cast.)-.195 E 1.932
(The resulting type of an assignment is the original type of e1.)33.336
576 R 1.932(The result is ne)8.432 F -.195(ve)-.325 G 5.183(ra).195 G(n)
-5.183 E(lv)33.336 591 Q 3.952(alue. In)-.325 F -.195(ve)3.952 G .702
(ry early v).195 F .702
(ersions of C, structs and unions could not be assigned.)-.195 F .702
(This is no)7.202 F .94(longer the case, b)33.336 606 R .94
(ut the assignment operator still can not be used to cop)-.26 F 4.19
(yaw)-.13 G .941(hole array)-4.19 F(.)-.845 E 2.307
(This is because if e1 is of array type, the usual con)33.336 621 R
-.195(ve)-.52 G 2.306(rsions are applied, making it a).195 F
(pointer type which is not an lv)33.336 636 Q(alue.)-.325 E F4
(Comma Expr)184.747 666 Q(essions \(Le)-.234 E -.13(ve)-.195 G 3.25(l1)
.13 G(\))-3.25 E F1<83>33.336 696 Q F2(e1,e2)6.03 E F1 6.03(:T)C 2.78
(he comma, or sequential operator is also an in)-6.03 F -.195(ve)-.52 G
2.78(ntion of C.).195 F 2.781(e1 is fully)9.281 F -.325(eva)33.336 711 S
5.012(luated. An).325 F 5.012(yv)-.195 G 1.762
(alue which it may produce is discarded, then e2 is e)-5.337 F -.325(va)
-.325 G 1.761(luated and the).325 F .377(result is the v)33.336 726 R
.378(alue of the o)-.325 F -.195(ve)-.195 G .378(rall e).195 F 3.628
(xpression. There)-.195 F .378(is no requirement that e1 and e2 be of)
3.628 F 1.92(compatible types.)33.336 741 R 1.919
(The result type is the type of e2 and is not an lv)8.42 F 5.169
(alue. Harbison)-.325 F(&)5.169 E 0 Cg EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF 138.492(ECE466:Compilers Unit)33.336 60 R
(3/pg 28)2.25 E(\2512008 Jef)142.155 E 2.25(fH)-.225 G(akner)-2.25 E/F1
13/Times-Roman@0 SF 1.003(Steele says that unary con)33.336 120 R -.195
(ve)-.52 G 1.004(rsions are applied, b).195 F 1.004
(ut the current ISO C standard does not,)-.26 F .282
(and gcc seems to follo)33.336 135 R 3.531(wt)-.325 G .281(he latter)
-3.531 F 3.531(,e)-.52 G(.g.)-3.531 E/F2 13/Courier@0 SF .281
(sizeof \(i,c\))3.531 F F1 .281(where i is an int and c is a char)3.531
F(,)-.52 E(is 1.)33.336 150 Q 2.514(Note that syntatically)33.336 171 R
5.764(,ac)-.845 G 2.514(omma e)-5.764 F 2.514
(xpression is at the top le)-.195 F -.195(ve)-.325 G 5.764(lo).195 G
5.764(ft)-5.764 G 2.515(he de\214nition of an)-5.764 F -.195(ex)33.336
186 S 4.724(pression. There).195 F 1.474
(are places in the grammar where an e)4.724 F 1.474
(xpression is permitted b)-.195 F 1.474(ut this)-.26 F .609
(could cause confusion with other uses of the comma tok)33.336 201 R
.609(en, and therefore in those places)-.13 F 1.222
(the grammar speci\214es an assignment_e)33.336 216 R 1.222
(xpression \(i.e. starting at Le)-.195 F -.195(ve)-.325 G 4.472(l2).195
G 4.472(\). These)-4.472 F(places)4.472 E .035
(are function calls, enumeration v)33.336 231 R .036
(alue declarations, initializers, bit \214eld length speci\214ers in)
-.325 F(struct/union de\214nitions.)33.336 246 Q 0 Cg EP
%%Trailer
end
%%EOF
